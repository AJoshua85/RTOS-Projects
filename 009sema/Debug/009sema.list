
009sema.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a14  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c48  08005c48  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005c48  08005c48  00015c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c50  08005c50  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e14  20000078  08005cd0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e8c  08005cd0  00022e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013936  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002990  00000000  00000000  000339de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001010  00000000  00000000  00036370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed8  00000000  00000000  00037380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002592d  00000000  00000000  00038258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3c9  00000000  00000000  0005db85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e265c  00000000  00000000  0006af4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d5aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045bc  00000000  00000000  0014d628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005bac 	.word	0x08005bac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08005bac 	.word	0x08005bac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fde9 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f895 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f929 	bl	8000804 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b2:	f000 f8fd 	bl	80007b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  FilledSlotSem = xSemaphoreCreateCounting(5,0);
 80005b6:	2100      	movs	r1, #0
 80005b8:	2005      	movs	r0, #5
 80005ba:	f003 f866 	bl	800368a <xQueueCreateCountingSemaphore>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b3d      	ldr	r3, [pc, #244]	; (80006b8 <main+0x118>)
 80005c2:	601a      	str	r2, [r3, #0]
  EmptySlotSem = xSemaphoreCreateCounting(5,5);
 80005c4:	2105      	movs	r1, #5
 80005c6:	2005      	movs	r0, #5
 80005c8:	f003 f85f 	bl	800368a <xQueueCreateCountingSemaphore>
 80005cc:	4602      	mov	r2, r0
 80005ce:	4b3b      	ldr	r3, [pc, #236]	; (80006bc <main+0x11c>)
 80005d0:	601a      	str	r2, [r3, #0]
  mutex = xSemaphoreCreateMutex();
 80005d2:	2001      	movs	r0, #1
 80005d4:	f003 f841 	bl	800365a <xQueueCreateMutex>
 80005d8:	4602      	mov	r2, r0
 80005da:	4b39      	ldr	r3, [pc, #228]	; (80006c0 <main+0x120>)
 80005dc:	601a      	str	r2, [r3, #0]

  if(mutex != NULL && FilledSlotSem != NULL && EmptySlotSem != NULL )
 80005de:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <main+0x120>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d066      	beq.n	80006b4 <main+0x114>
 80005e6:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <main+0x118>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d062      	beq.n	80006b4 <main+0x114>
 80005ee:	4b33      	ldr	r3, [pc, #204]	; (80006bc <main+0x11c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d05e      	beq.n	80006b4 <main+0x114>
  {
      for(int i = 0; i < prodTask;i++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
 80005fa:	e02a      	b.n	8000652 <main+0xb2>
      {
    	  tbuf[i]= i;
 80005fc:	4931      	ldr	r1, [pc, #196]	; (80006c4 <main+0x124>)
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	69fa      	ldr	r2, [r7, #28]
 8000602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	  sprintf(task_name,"Producer %i", i);
 8000606:	463b      	mov	r3, r7
 8000608:	69fa      	ldr	r2, [r7, #28]
 800060a:	492f      	ldr	r1, [pc, #188]	; (80006c8 <main+0x128>)
 800060c:	4618      	mov	r0, r3
 800060e:	f004 fed1 	bl	80053b4 <siprintf>
    	  status =xTaskCreate(producer,task_name, 600,(void*)(uint32_t)&tbuf[i], 1, NULL);
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4a2b      	ldr	r2, [pc, #172]	; (80006c4 <main+0x124>)
 8000618:	441a      	add	r2, r3
 800061a:	4639      	mov	r1, r7
 800061c:	2300      	movs	r3, #0
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2301      	movs	r3, #1
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	4613      	mov	r3, r2
 8000626:	f44f 7216 	mov.w	r2, #600	; 0x258
 800062a:	4828      	ldr	r0, [pc, #160]	; (80006cc <main+0x12c>)
 800062c:	f003 fb12 	bl	8003c54 <xTaskCreate>
 8000630:	6178      	str	r0, [r7, #20]
    	  configASSERT(status == pdPASS);
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d009      	beq.n	800064c <main+0xac>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063c:	f383 8811 	msr	BASEPRI, r3
 8000640:	f3bf 8f6f 	isb	sy
 8000644:	f3bf 8f4f 	dsb	sy
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	e7fe      	b.n	800064a <main+0xaa>
      for(int i = 0; i < prodTask;i++)
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	3301      	adds	r3, #1
 8000650:	61fb      	str	r3, [r7, #28]
 8000652:	2305      	movs	r3, #5
 8000654:	461a      	mov	r2, r3
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	4293      	cmp	r3, r2
 800065a:	dbcf      	blt.n	80005fc <main+0x5c>
      }

      for(int i = 0; i < consuTask;i++)
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
 8000660:	e021      	b.n	80006a6 <main+0x106>
      {
    	  sprintf(task_name, "Consumer %i", i);
 8000662:	463b      	mov	r3, r7
 8000664:	69ba      	ldr	r2, [r7, #24]
 8000666:	491a      	ldr	r1, [pc, #104]	; (80006d0 <main+0x130>)
 8000668:	4618      	mov	r0, r3
 800066a:	f004 fea3 	bl	80053b4 <siprintf>
       	  status =xTaskCreate(consumer,task_name,600,NULL, 2, NULL);
 800066e:	4639      	mov	r1, r7
 8000670:	2300      	movs	r3, #0
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2300      	movs	r3, #0
 800067a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800067e:	4815      	ldr	r0, [pc, #84]	; (80006d4 <main+0x134>)
 8000680:	f003 fae8 	bl	8003c54 <xTaskCreate>
 8000684:	6178      	str	r0, [r7, #20]
       	  configASSERT(status == pdPASS);
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d009      	beq.n	80006a0 <main+0x100>
 800068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e7fe      	b.n	800069e <main+0xfe>
      for(int i = 0; i < consuTask;i++)
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	3301      	adds	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	2302      	movs	r3, #2
 80006a8:	461a      	mov	r2, r3
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	4293      	cmp	r3, r2
 80006ae:	dbd8      	blt.n	8000662 <main+0xc2>
      }

      vTaskStartScheduler();
 80006b0:	f003 fcc8 	bl	8004044 <vTaskStartScheduler>
  }
   /* USER CODE END 2 */
   /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <main+0x114>
 80006b6:	bf00      	nop
 80006b8:	20000098 	.word	0x20000098
 80006bc:	2000009c 	.word	0x2000009c
 80006c0:	200000a0 	.word	0x200000a0
 80006c4:	200000a4 	.word	0x200000a4
 80006c8:	08005bc4 	.word	0x08005bc4
 80006cc:	08000cb9 	.word	0x08000cb9
 80006d0:	08005bd0 	.word	0x08005bd0
 80006d4:	08000da9 	.word	0x08000da9

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fe5b 	bl	80053a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <SystemClock_Config+0xd0>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <SystemClock_Config+0xd0>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xd4>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800074c:	2308      	movs	r3, #8
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000750:	2332      	movs	r3, #50	; 0x32
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000754:	2304      	movs	r3, #4
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000758:	2307      	movs	r3, #7
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f815 	bl	8001790 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800076c:	f000 fb92 	bl	8000e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800077c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fa6e 	bl	8001c70 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800079a:	f000 fb7b 	bl	8000e94 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART1_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e8:	f001 fea4 	bl	8002534 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 fb4f 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20012df0 	.word	0x20012df0
 8000800:	40011000 	.word	0x40011000

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	; 0x38
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
 800081e:	4bb1      	ldr	r3, [pc, #708]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4ab0      	ldr	r2, [pc, #704]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4bae      	ldr	r3, [pc, #696]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	623b      	str	r3, [r7, #32]
 8000834:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	4baa      	ldr	r3, [pc, #680]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4aa9      	ldr	r2, [pc, #676]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4ba7      	ldr	r3, [pc, #668]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	4ba3      	ldr	r3, [pc, #652]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4aa2      	ldr	r2, [pc, #648]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4ba0      	ldr	r3, [pc, #640]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	4b9c      	ldr	r3, [pc, #624]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a9b      	ldr	r2, [pc, #620]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b99      	ldr	r3, [pc, #612]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b95      	ldr	r3, [pc, #596]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a94      	ldr	r2, [pc, #592]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b92      	ldr	r3, [pc, #584]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b8e      	ldr	r3, [pc, #568]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a8d      	ldr	r2, [pc, #564]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b8b      	ldr	r3, [pc, #556]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b87      	ldr	r3, [pc, #540]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a86      	ldr	r2, [pc, #536]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b84      	ldr	r3, [pc, #528]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b80      	ldr	r3, [pc, #512]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a7f      	ldr	r2, [pc, #508]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b7d      	ldr	r3, [pc, #500]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2116      	movs	r1, #22
 80008fe:	487a      	ldr	r0, [pc, #488]	; (8000ae8 <MX_GPIO_Init+0x2e4>)
 8000900:	f000 ff2c 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	4878      	ldr	r0, [pc, #480]	; (8000aec <MX_GPIO_Init+0x2e8>)
 800090a:	f000 ff27 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000914:	4876      	ldr	r0, [pc, #472]	; (8000af0 <MX_GPIO_Init+0x2ec>)
 8000916:	f000 ff21 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000920:	4874      	ldr	r0, [pc, #464]	; (8000af4 <MX_GPIO_Init+0x2f0>)
 8000922:	f000 ff1b 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin 
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin 
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8000926:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000938:	230c      	movs	r3, #12
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	486d      	ldr	r0, [pc, #436]	; (8000af8 <MX_GPIO_Init+0x2f4>)
 8000944:	f000 fd60 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000948:	f44f 7360 	mov.w	r3, #896	; 0x380
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800095a:	2305      	movs	r3, #5
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4864      	ldr	r0, [pc, #400]	; (8000af8 <MX_GPIO_Init+0x2f4>)
 8000966:	f000 fd4f 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800097c:	230e      	movs	r3, #14
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	485c      	ldr	r0, [pc, #368]	; (8000af8 <MX_GPIO_Init+0x2f4>)
 8000988:	f000 fd3e 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800099c:	230c      	movs	r3, #12
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4850      	ldr	r0, [pc, #320]	; (8000ae8 <MX_GPIO_Init+0x2e4>)
 80009a8:	f000 fd2e 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009ac:	2316      	movs	r3, #22
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	4849      	ldr	r0, [pc, #292]	; (8000ae8 <MX_GPIO_Init+0x2e4>)
 80009c4:	f000 fd20 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009c8:	f248 0307 	movw	r3, #32775	; 0x8007
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ce:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <MX_GPIO_Init+0x2f8>)
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4843      	ldr	r0, [pc, #268]	; (8000aec <MX_GPIO_Init+0x2e8>)
 80009de:	f000 fd13 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin 
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 80009e2:	f641 0358 	movw	r3, #6232	; 0x1858
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009f4:	230e      	movs	r3, #14
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	483b      	ldr	r0, [pc, #236]	; (8000aec <MX_GPIO_Init+0x2e8>)
 8000a00:	f000 fd02 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4834      	ldr	r0, [pc, #208]	; (8000aec <MX_GPIO_Init+0x2e8>)
 8000a1c:	f000 fcf4 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a24:	4b35      	ldr	r3, [pc, #212]	; (8000afc <MX_GPIO_Init+0x2f8>)
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	482d      	ldr	r0, [pc, #180]	; (8000ae8 <MX_GPIO_Init+0x2e4>)
 8000a34:	f000 fce8 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a48:	2309      	movs	r3, #9
 8000a4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	482b      	ldr	r0, [pc, #172]	; (8000b00 <MX_GPIO_Init+0x2fc>)
 8000a54:	f000 fcd8 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4825      	ldr	r0, [pc, #148]	; (8000b00 <MX_GPIO_Init+0x2fc>)
 8000a6c:	f000 fccc 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin 
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8000a70:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a82:	230c      	movs	r3, #12
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4819      	ldr	r0, [pc, #100]	; (8000af4 <MX_GPIO_Init+0x2f0>)
 8000a8e:	f000 fcbb 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin 
                           D8_Pin D9_Pin D10_Pin D11_Pin 
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8000a92:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	4619      	mov	r1, r3
 8000aae:	4815      	ldr	r0, [pc, #84]	; (8000b04 <MX_GPIO_Init+0x300>)
 8000ab0:	f000 fcaa 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000ab4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac6:	230e      	movs	r3, #14
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480b      	ldr	r0, [pc, #44]	; (8000b00 <MX_GPIO_Init+0x2fc>)
 8000ad2:	f000 fc99 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000ad6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae0:	e012      	b.n	8000b08 <MX_GPIO_Init+0x304>
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020c00 	.word	0x40020c00
 8000af4:	40021800 	.word	0x40021800
 8000af8:	40021400 	.word	0x40021400
 8000afc:	10120000 	.word	0x10120000
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000b10:	230c      	movs	r3, #12
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4862      	ldr	r0, [pc, #392]	; (8000ca4 <MX_GPIO_Init+0x4a0>)
 8000b1c:	f000 fc74 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	485b      	ldr	r0, [pc, #364]	; (8000ca4 <MX_GPIO_Init+0x4a0>)
 8000b36:	f000 fc67 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin 
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8000b3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4854      	ldr	r0, [pc, #336]	; (8000ca8 <MX_GPIO_Init+0x4a4>)
 8000b58:	f000 fc56 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	484d      	ldr	r0, [pc, #308]	; (8000ca8 <MX_GPIO_Init+0x4a4>)
 8000b72:	f000 fc49 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4846      	ldr	r0, [pc, #280]	; (8000ca8 <MX_GPIO_Init+0x4a4>)
 8000b90:	f000 fc3a 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b94:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ba6:	230e      	movs	r3, #14
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	483e      	ldr	r0, [pc, #248]	; (8000cac <MX_GPIO_Init+0x4a8>)
 8000bb2:	f000 fc29 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000bb6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bc8:	230e      	movs	r3, #14
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4837      	ldr	r0, [pc, #220]	; (8000cb0 <MX_GPIO_Init+0x4ac>)
 8000bd4:	f000 fc18 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bde:	2312      	movs	r3, #18
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bea:	2304      	movs	r3, #4
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	482e      	ldr	r0, [pc, #184]	; (8000cb0 <MX_GPIO_Init+0x4ac>)
 8000bf6:	f000 fc07 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c00:	2312      	movs	r3, #18
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4827      	ldr	r0, [pc, #156]	; (8000cb4 <MX_GPIO_Init+0x4b0>)
 8000c18:	f000 fbf6 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000c1c:	2348      	movs	r3, #72	; 0x48
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c2c:	230e      	movs	r3, #14
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	481c      	ldr	r0, [pc, #112]	; (8000ca8 <MX_GPIO_Init+0x4a4>)
 8000c38:	f000 fbe6 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c4e:	2309      	movs	r3, #9
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4814      	ldr	r0, [pc, #80]	; (8000cac <MX_GPIO_Init+0x4a8>)
 8000c5a:	f000 fbd5 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c5e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_GPIO_Init+0x4a8>)
 8000c78:	f000 fbc6 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c7c:	2360      	movs	r3, #96	; 0x60
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MX_GPIO_Init+0x4a0>)
 8000c98:	f000 fbb6 	bl	8001408 <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3738      	adds	r7, #56	; 0x38
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40020c00 	.word	0x40020c00
 8000cac:	40021800 	.word	0x40021800
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <producer>:

/* USER CODE BEGIN 4 */
void producer(void *parameters)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	char tbuf[28];
	int num = *(int *)parameters;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i = 0; i<numWrite; i++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cca:	e050      	b.n	8000d6e <producer+0xb6>
	{
		xSemaphoreTake(EmptySlotSem,portMAX_DELAY);
 8000ccc:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <producer+0xd0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fdd5 	bl	8003884 <xQueueSemaphoreTake>
		//Lock access to the buffer

		xSemaphoreTake(mutex,portMAX_DELAY);
 8000cda:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <producer+0xd4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 fdce 	bl	8003884 <xQueueSemaphoreTake>
		sprintf(tbuf,"Printing val of %i\n",num);
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cee:	4928      	ldr	r1, [pc, #160]	; (8000d90 <producer+0xd8>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 fb5f 	bl	80053b4 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)tbuf, strlen(tbuf),HAL_MAX_DELAY);
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fa78 	bl	80001f0 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	f107 010c 	add.w	r1, r7, #12
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	4821      	ldr	r0, [pc, #132]	; (8000d94 <producer+0xdc>)
 8000d0e:	f001 fc5e 	bl	80025ce <HAL_UART_Transmit>
		buf[head] = num;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <producer+0xe0>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4a20      	ldr	r2, [pc, #128]	; (8000d9c <producer+0xe4>)
 8000d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		head = (head +1)%limit;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <producer+0xe0>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <producer+0xe8>)
 8000d2c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d30:	1059      	asrs	r1, r3, #1
 8000d32:	17d3      	asrs	r3, r2, #31
 8000d34:	1ac9      	subs	r1, r1, r3
 8000d36:	460b      	mov	r3, r1
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	1ad1      	subs	r1, r2, r3
 8000d3e:	b2ca      	uxtb	r2, r1
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <producer+0xe0>)
 8000d42:	701a      	strb	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(500));
 8000d44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d48:	f003 f948 	bl	8003fdc <vTaskDelay>
		xSemaphoreGive(mutex);//Release lock
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <producer+0xd4>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	2300      	movs	r3, #0
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	f002 fcc9 	bl	80036ec <xQueueGenericSend>

		//Signal to consumer task is ready to run
		xSemaphoreGive(FilledSlotSem);
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <producer+0xec>)
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	f002 fcc2 	bl	80036ec <xQueueGenericSend>
	for (int i = 0; i<numWrite; i++)
 8000d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d6e:	2303      	movs	r3, #3
 8000d70:	461a      	mov	r2, r3
 8000d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d74:	4293      	cmp	r3, r2
 8000d76:	dba9      	blt.n	8000ccc <producer+0x14>
	}
	vTaskDelete(NULL);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f003 f8a1 	bl	8003ec0 <vTaskDelete>
}
 8000d7e:	bf00      	nop
 8000d80:	3730      	adds	r7, #48	; 0x30
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000009c 	.word	0x2000009c
 8000d8c:	200000a0 	.word	0x200000a0
 8000d90:	08005bdc 	.word	0x08005bdc
 8000d94:	20012df0 	.word	0x20012df0
 8000d98:	20000095 	.word	0x20000095
 8000d9c:	20012e30 	.word	0x20012e30
 8000da0:	66666667 	.word	0x66666667
 8000da4:	20000098 	.word	0x20000098

08000da8 <consumer>:

void consumer(void *parameters)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	int val;
	char tbuf[8];
	for (;;)
	{
		xSemaphoreTake(FilledSlotSem,portMAX_DELAY);
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <consumer+0xa8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	4618      	mov	r0, r3
 8000dba:	f002 fd63 	bl	8003884 <xQueueSemaphoreTake>
		val = buf[tail];
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <consumer+0xac>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <consumer+0xb0>)
 8000dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dcc:	617b      	str	r3, [r7, #20]
		tail = (tail+1)%limit;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <consumer+0xac>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	1c5a      	adds	r2, r3, #1
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <consumer+0xb4>)
 8000dd8:	fb83 1302 	smull	r1, r3, r3, r2
 8000ddc:	1059      	asrs	r1, r3, #1
 8000dde:	17d3      	asrs	r3, r2, #31
 8000de0:	1ac9      	subs	r1, r1, r3
 8000de2:	460b      	mov	r3, r1
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	1ad1      	subs	r1, r2, r3
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <consumer+0xac>)
 8000dee:	701a      	strb	r2, [r3, #0]

		xSemaphoreTake(mutex,portMAX_DELAY);
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <consumer+0xb8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 fd43 	bl	8003884 <xQueueSemaphoreTake>
		sprintf(tbuf,"%i\n",val);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4917      	ldr	r1, [pc, #92]	; (8000e64 <consumer+0xbc>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 fad4 	bl	80053b4 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)tbuf,strlen(tbuf),HAL_MAX_DELAY);
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff f9ed 	bl	80001f0 <strlen>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	f107 010c 	add.w	r1, r7, #12
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <consumer+0xc0>)
 8000e24:	f001 fbd3 	bl	80025ce <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000e28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e2c:	f003 f8d6 	bl	8003fdc <vTaskDelay>
		xSemaphoreGive(mutex);
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <consumer+0xb8>)
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	2300      	movs	r3, #0
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	f002 fc57 	bl	80036ec <xQueueGenericSend>
		//Signal to producer task is ready to run
		xSemaphoreGive(EmptySlotSem);
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <consumer+0xc4>)
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	2300      	movs	r3, #0
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	f002 fc50 	bl	80036ec <xQueueGenericSend>
		xSemaphoreTake(FilledSlotSem,portMAX_DELAY);
 8000e4c:	e7b0      	b.n	8000db0 <consumer+0x8>
 8000e4e:	bf00      	nop
 8000e50:	20000098 	.word	0x20000098
 8000e54:	20000094 	.word	0x20000094
 8000e58:	20012e30 	.word	0x20012e30
 8000e5c:	66666667 	.word	0x66666667
 8000e60:	200000a0 	.word	0x200000a0
 8000e64:	08005bf0 	.word	0x08005bf0
 8000e68:	20012df0 	.word	0x20012df0
 8000e6c:	2000009c 	.word	0x2000009c

08000e70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d101      	bne.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e82:	f000 f99d 	bl	80011c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40001000 	.word	0x40001000

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <HAL_UART_MspInit+0x94>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d134      	bne.n	8000f80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f60:	2307      	movs	r3, #7
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4809      	ldr	r0, [pc, #36]	; (8000f90 <HAL_UART_MspInit+0x9c>)
 8000f6c:	f000 fa4c 	bl	8001408 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2106      	movs	r1, #6
 8000f74:	2025      	movs	r0, #37	; 0x25
 8000f76:	f000 f9fb 	bl	8001370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f7a:	2025      	movs	r0, #37	; 0x25
 8000f7c:	f000 fa14 	bl	80013a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000

08000f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	2036      	movs	r0, #54	; 0x36
 8000faa:	f000 f9e1 	bl	8001370 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000fae:	2036      	movs	r0, #54	; 0x36
 8000fb0:	f000 f9fa 	bl	80013a8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <HAL_InitTick+0xa4>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <HAL_InitTick+0xa4>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_InitTick+0xa4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd0:	f107 0210 	add.w	r2, r7, #16
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 f83a 	bl	8002054 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000fe0:	f001 f810 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_InitTick+0xa8>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	0c9b      	lsrs	r3, r3, #18
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_InitTick+0xac>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <HAL_InitTick+0xb0>)
 8000ffc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_InitTick+0xac>)
 8001000:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001004:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <HAL_InitTick+0xac>)
 8001008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <HAL_InitTick+0xac>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_InitTick+0xac>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <HAL_InitTick+0xac>)
 800101a:	f001 f84d 	bl	80020b8 <HAL_TIM_Base_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d104      	bne.n	800102e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <HAL_InitTick+0xac>)
 8001026:	f001 f87c 	bl	8002122 <HAL_TIM_Base_Start_IT>
 800102a:	4603      	mov	r3, r0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3730      	adds	r7, #48	; 0x30
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	431bde83 	.word	0x431bde83
 8001040:	20012e44 	.word	0x20012e44
 8001044:	40001000 	.word	0x40001000

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <USART1_IRQHandler+0x10>)
 8001082:	f001 fb3d 	bl	8002700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20012df0 	.word	0x20012df0

08001090 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <TIM6_DAC_IRQHandler+0x10>)
 8001096:	f001 f868 	bl	800216a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20012e44 	.word	0x20012e44

080010a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x50>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <_sbrk+0x16>
		heap_end = &end;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <_sbrk+0x50>)
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <_sbrk+0x54>)
 80010b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <_sbrk+0x50>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <_sbrk+0x50>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	466a      	mov	r2, sp
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d907      	bls.n	80010de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010ce:	f004 f933 	bl	8005338 <__errno>
 80010d2:	4602      	mov	r2, r0
 80010d4:	230c      	movs	r3, #12
 80010d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	e006      	b.n	80010ec <_sbrk+0x48>
	}

	heap_end += incr;
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <_sbrk+0x50>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <_sbrk+0x50>)
 80010e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000b8 	.word	0x200000b8
 80010f8:	20012e90 	.word	0x20012e90

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <SystemInit+0x28>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <SystemInit+0x28>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SystemInit+0x28>)
 8001112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001116:	609a      	str	r2, [r3, #8]
#endif
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800112c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>
  ldr  r2, =_sbss
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001146:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001152:	f7ff ffd3 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001156:	f004 f8f5 	bl	8005344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fa21 	bl	80005a0 <main>
  bx  lr    
 800115e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001160:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001164:	08005c58 	.word	0x08005c58
  ldr  r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800116c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001170:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001174:	20012e8c 	.word	0x20012e8c

08001178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_Init+0x40>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_Init+0x40>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_Init+0x40>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f8d8 	bl	800135a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fef2 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fe78 	bl	8000ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20012e84 	.word	0x20012e84

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20012e84 	.word	0x20012e84

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff4c 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001382:	f7ff ff61 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001386:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff ffb1 	bl	80012f4 <NVIC_EncodePriority>
 8001392:	4602      	mov	r2, r0
 8001394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff80 	bl	80012a0 <__NVIC_SetPriority>
}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff54 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d004      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e00c      	b.n	80013fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2205      	movs	r2, #5
 80013e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e177      	b.n	8001714 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 8166 	bne.w	800170e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d00b      	beq.n	8001462 <HAL_GPIO_Init+0x5a>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001456:	2b11      	cmp	r3, #17
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b12      	cmp	r3, #18
 8001460:	d130      	bne.n	80014c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0xfc>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b12      	cmp	r3, #18
 8001502:	d123      	bne.n	800154c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80c0 	beq.w	800170e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b65      	ldr	r3, [pc, #404]	; (8001728 <HAL_GPIO_Init+0x320>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a64      	ldr	r2, [pc, #400]	; (8001728 <HAL_GPIO_Init+0x320>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b62      	ldr	r3, [pc, #392]	; (8001728 <HAL_GPIO_Init+0x320>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015aa:	4a60      	ldr	r2, [pc, #384]	; (800172c <HAL_GPIO_Init+0x324>)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a57      	ldr	r2, [pc, #348]	; (8001730 <HAL_GPIO_Init+0x328>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d037      	beq.n	8001646 <HAL_GPIO_Init+0x23e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a56      	ldr	r2, [pc, #344]	; (8001734 <HAL_GPIO_Init+0x32c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d031      	beq.n	8001642 <HAL_GPIO_Init+0x23a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a55      	ldr	r2, [pc, #340]	; (8001738 <HAL_GPIO_Init+0x330>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d02b      	beq.n	800163e <HAL_GPIO_Init+0x236>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a54      	ldr	r2, [pc, #336]	; (800173c <HAL_GPIO_Init+0x334>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d025      	beq.n	800163a <HAL_GPIO_Init+0x232>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a53      	ldr	r2, [pc, #332]	; (8001740 <HAL_GPIO_Init+0x338>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01f      	beq.n	8001636 <HAL_GPIO_Init+0x22e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a52      	ldr	r2, [pc, #328]	; (8001744 <HAL_GPIO_Init+0x33c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d019      	beq.n	8001632 <HAL_GPIO_Init+0x22a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a51      	ldr	r2, [pc, #324]	; (8001748 <HAL_GPIO_Init+0x340>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0x226>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a50      	ldr	r2, [pc, #320]	; (800174c <HAL_GPIO_Init+0x344>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00d      	beq.n	800162a <HAL_GPIO_Init+0x222>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4f      	ldr	r2, [pc, #316]	; (8001750 <HAL_GPIO_Init+0x348>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x21e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4e      	ldr	r2, [pc, #312]	; (8001754 <HAL_GPIO_Init+0x34c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_GPIO_Init+0x21a>
 800161e:	2309      	movs	r3, #9
 8001620:	e012      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001622:	230a      	movs	r3, #10
 8001624:	e010      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001626:	2308      	movs	r3, #8
 8001628:	e00e      	b.n	8001648 <HAL_GPIO_Init+0x240>
 800162a:	2307      	movs	r3, #7
 800162c:	e00c      	b.n	8001648 <HAL_GPIO_Init+0x240>
 800162e:	2306      	movs	r3, #6
 8001630:	e00a      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001632:	2305      	movs	r3, #5
 8001634:	e008      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001636:	2304      	movs	r3, #4
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x240>
 800163a:	2303      	movs	r3, #3
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x240>
 800163e:	2302      	movs	r3, #2
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x240>
 8001646:	2300      	movs	r3, #0
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	4093      	lsls	r3, r2
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001658:	4934      	ldr	r1, [pc, #208]	; (800172c <HAL_GPIO_Init+0x324>)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001666:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <HAL_GPIO_Init+0x350>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800168a:	4a33      	ldr	r2, [pc, #204]	; (8001758 <HAL_GPIO_Init+0x350>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001690:	4b31      	ldr	r3, [pc, #196]	; (8001758 <HAL_GPIO_Init+0x350>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b4:	4a28      	ldr	r2, [pc, #160]	; (8001758 <HAL_GPIO_Init+0x350>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_GPIO_Init+0x350>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016de:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_GPIO_Init+0x350>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <HAL_GPIO_Init+0x350>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001708:	4a13      	ldr	r2, [pc, #76]	; (8001758 <HAL_GPIO_Init+0x350>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3301      	adds	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	f67f ae84 	bls.w	8001424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800171c:	bf00      	nop
 800171e:	3724      	adds	r7, #36	; 0x24
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40023800 	.word	0x40023800
 800172c:	40013800 	.word	0x40013800
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	40020800 	.word	0x40020800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40021000 	.word	0x40021000
 8001744:	40021400 	.word	0x40021400
 8001748:	40021800 	.word	0x40021800
 800174c:	40021c00 	.word	0x40021c00
 8001750:	40022000 	.word	0x40022000
 8001754:	40022400 	.word	0x40022400
 8001758:	40013c00 	.word	0x40013c00

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001778:	e003      	b.n	8001782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	041a      	lsls	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	619a      	str	r2, [r3, #24]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e25b      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d075      	beq.n	800189a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ae:	4ba3      	ldr	r3, [pc, #652]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d00c      	beq.n	80017d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ba:	4ba0      	ldr	r3, [pc, #640]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d112      	bne.n	80017ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c6:	4b9d      	ldr	r3, [pc, #628]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d2:	d10b      	bne.n	80017ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	4b99      	ldr	r3, [pc, #612]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d05b      	beq.n	8001898 <HAL_RCC_OscConfig+0x108>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d157      	bne.n	8001898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e236      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f4:	d106      	bne.n	8001804 <HAL_RCC_OscConfig+0x74>
 80017f6:	4b91      	ldr	r3, [pc, #580]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a90      	ldr	r2, [pc, #576]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e01d      	b.n	8001840 <HAL_RCC_OscConfig+0xb0>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x98>
 800180e:	4b8b      	ldr	r3, [pc, #556]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a8a      	ldr	r2, [pc, #552]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b88      	ldr	r3, [pc, #544]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a87      	ldr	r2, [pc, #540]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0xb0>
 8001828:	4b84      	ldr	r3, [pc, #528]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a83      	ldr	r2, [pc, #524]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b81      	ldr	r3, [pc, #516]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a80      	ldr	r2, [pc, #512]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fcce 	bl	80011e8 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fcca 	bl	80011e8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1fb      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b76      	ldr	r3, [pc, #472]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0xc0>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fcba 	bl	80011e8 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fcb6 	bl	80011e8 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1e7      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	4b6c      	ldr	r3, [pc, #432]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0xe8>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d063      	beq.n	800196e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018a6:	4b65      	ldr	r3, [pc, #404]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b2:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d11c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018be:	4b5f      	ldr	r3, [pc, #380]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d116      	bne.n	80018f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_RCC_OscConfig+0x152>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e1bb      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4952      	ldr	r1, [pc, #328]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f6:	e03a      	b.n	800196e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001900:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <HAL_RCC_OscConfig+0x2b0>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff fc6f 	bl	80011e8 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190e:	f7ff fc6b 	bl	80011e8 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e19c      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192c:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4940      	ldr	r1, [pc, #256]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
 8001940:	e015      	b.n	800196e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001942:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <HAL_RCC_OscConfig+0x2b0>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fc4e 	bl	80011e8 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fc4a 	bl	80011e8 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e17b      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d030      	beq.n	80019dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d016      	beq.n	80019b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_OscConfig+0x2b4>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff fc2e 	bl	80011e8 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fc2a 	bl	80011e8 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e15b      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x200>
 80019ae:	e015      	b.n	80019dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_OscConfig+0x2b4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b6:	f7ff fc17 	bl	80011e8 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019be:	f7ff fc13 	bl	80011e8 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e144      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80019d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80a0 	beq.w	8001b2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10f      	bne.n	8001a1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a16:	2301      	movs	r3, #1
 8001a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_OscConfig+0x2b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d121      	bne.n	8001a6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_RCC_OscConfig+0x2b8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_RCC_OscConfig+0x2b8>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a32:	f7ff fbd9 	bl	80011e8 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	e011      	b.n	8001a5e <HAL_RCC_OscConfig+0x2ce>
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	42470000 	.word	0x42470000
 8001a44:	42470e80 	.word	0x42470e80
 8001a48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4c:	f7ff fbcc 	bl	80011e8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e0fd      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b81      	ldr	r3, [pc, #516]	; (8001c64 <HAL_RCC_OscConfig+0x4d4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d106      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
 8001a72:	4b7d      	ldr	r3, [pc, #500]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	4a7c      	ldr	r2, [pc, #496]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7e:	e01c      	b.n	8001aba <HAL_RCC_OscConfig+0x32a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d10c      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x312>
 8001a88:	4b77      	ldr	r3, [pc, #476]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	4a76      	ldr	r2, [pc, #472]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
 8001a94:	4b74      	ldr	r3, [pc, #464]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a73      	ldr	r2, [pc, #460]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa0:	e00b      	b.n	8001aba <HAL_RCC_OscConfig+0x32a>
 8001aa2:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa6:	4a70      	ldr	r2, [pc, #448]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6713      	str	r3, [r2, #112]	; 0x70
 8001aae:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	4a6d      	ldr	r2, [pc, #436]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
 8001ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d015      	beq.n	8001aee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fb91 	bl	80011e8 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff fb8d 	bl	80011e8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0bc      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	4b61      	ldr	r3, [pc, #388]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ee      	beq.n	8001aca <HAL_RCC_OscConfig+0x33a>
 8001aec:	e014      	b.n	8001b18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fb7b 	bl	80011e8 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff fb77 	bl	80011e8 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e0a6      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ee      	bne.n	8001af6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1e:	4b52      	ldr	r3, [pc, #328]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	4a51      	ldr	r2, [pc, #324]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8092 	beq.w	8001c58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d05c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d141      	bne.n	8001bcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b48:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <HAL_RCC_OscConfig+0x4dc>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fb4b 	bl	80011e8 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff fb47 	bl	80011e8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e078      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b68:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	019b      	lsls	r3, r3, #6
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	085b      	lsrs	r3, r3, #1
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	061b      	lsls	r3, r3, #24
 8001b98:	4933      	ldr	r1, [pc, #204]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9e:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <HAL_RCC_OscConfig+0x4dc>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb20 	bl	80011e8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff fb1c 	bl	80011e8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e04d      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x41c>
 8001bca:	e045      	b.n	8001c58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <HAL_RCC_OscConfig+0x4dc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fb09 	bl	80011e8 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff fb05 	bl	80011e8 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e036      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x44a>
 8001bf8:	e02e      	b.n	8001c58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e029      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_RCC_OscConfig+0x4d8>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d115      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c2e:	4013      	ands	r3, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d10d      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40007000 	.word	0x40007000
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	42470060 	.word	0x42470060

08001c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0cc      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d90c      	bls.n	8001cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b65      	ldr	r3, [pc, #404]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b63      	ldr	r3, [pc, #396]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0b8      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc4:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4a52      	ldr	r2, [pc, #328]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce8:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	494d      	ldr	r1, [pc, #308]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d044      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d119      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e07f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2e:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e06f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e067      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4e:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f023 0203 	bic.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4934      	ldr	r1, [pc, #208]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d60:	f7ff fa42 	bl	80011e8 <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7ff fa3e 	bl	80011e8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e04f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 020c 	and.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1eb      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d20c      	bcs.n	8001db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e032      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4916      	ldr	r1, [pc, #88]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	490e      	ldr	r1, [pc, #56]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001df6:	f000 f821 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1c8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f8bc 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023c00 	.word	0x40023c00
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	08005bfc 	.word	0x08005bfc
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000004 	.word	0x20000004

08001e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e52:	4b63      	ldr	r3, [pc, #396]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d007      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x32>
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d008      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x38>
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 80b4 	bne.w	8001fd0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e68:	4b5e      	ldr	r3, [pc, #376]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e6a:	60bb      	str	r3, [r7, #8]
       break;
 8001e6c:	e0b3      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e6e:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001e70:	60bb      	str	r3, [r7, #8]
      break;
 8001e72:	e0b0      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e74:	4b5a      	ldr	r3, [pc, #360]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e7e:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d04a      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8a:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	f04f 0400 	mov.w	r4, #0
 8001e94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	ea03 0501 	and.w	r5, r3, r1
 8001ea0:	ea04 0602 	and.w	r6, r4, r2
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	4632      	mov	r2, r6
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	f04f 0400 	mov.w	r4, #0
 8001eb0:	0154      	lsls	r4, r2, #5
 8001eb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001eb6:	014b      	lsls	r3, r1, #5
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4622      	mov	r2, r4
 8001ebc:	1b49      	subs	r1, r1, r5
 8001ebe:	eb62 0206 	sbc.w	r2, r2, r6
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	f04f 0400 	mov.w	r4, #0
 8001eca:	0194      	lsls	r4, r2, #6
 8001ecc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ed0:	018b      	lsls	r3, r1, #6
 8001ed2:	1a5b      	subs	r3, r3, r1
 8001ed4:	eb64 0402 	sbc.w	r4, r4, r2
 8001ed8:	f04f 0100 	mov.w	r1, #0
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ee6:	00d9      	lsls	r1, r3, #3
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4614      	mov	r4, r2
 8001eec:	195b      	adds	r3, r3, r5
 8001eee:	eb44 0406 	adc.w	r4, r4, r6
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	0262      	lsls	r2, r4, #9
 8001efc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f00:	0259      	lsls	r1, r3, #9
 8001f02:	460b      	mov	r3, r1
 8001f04:	4614      	mov	r4, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	4621      	mov	r1, r4
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f04f 0400 	mov.w	r4, #0
 8001f10:	461a      	mov	r2, r3
 8001f12:	4623      	mov	r3, r4
 8001f14:	f7fe f9c4 	bl	80002a0 <__aeabi_uldivmod>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e049      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	f04f 0400 	mov.w	r4, #0
 8001f2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	ea03 0501 	and.w	r5, r3, r1
 8001f36:	ea04 0602 	and.w	r6, r4, r2
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	4632      	mov	r2, r6
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	f04f 0400 	mov.w	r4, #0
 8001f46:	0154      	lsls	r4, r2, #5
 8001f48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f4c:	014b      	lsls	r3, r1, #5
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4622      	mov	r2, r4
 8001f52:	1b49      	subs	r1, r1, r5
 8001f54:	eb62 0206 	sbc.w	r2, r2, r6
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	f04f 0400 	mov.w	r4, #0
 8001f60:	0194      	lsls	r4, r2, #6
 8001f62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f66:	018b      	lsls	r3, r1, #6
 8001f68:	1a5b      	subs	r3, r3, r1
 8001f6a:	eb64 0402 	sbc.w	r4, r4, r2
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	00e2      	lsls	r2, r4, #3
 8001f78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f7c:	00d9      	lsls	r1, r3, #3
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4614      	mov	r4, r2
 8001f82:	195b      	adds	r3, r3, r5
 8001f84:	eb44 0406 	adc.w	r4, r4, r6
 8001f88:	f04f 0100 	mov.w	r1, #0
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	02a2      	lsls	r2, r4, #10
 8001f92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f96:	0299      	lsls	r1, r3, #10
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4614      	mov	r4, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f04f 0400 	mov.w	r4, #0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4623      	mov	r3, r4
 8001faa:	f7fe f979 	bl	80002a0 <__aeabi_uldivmod>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460c      	mov	r4, r1
 8001fb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	60bb      	str	r3, [r7, #8]
      break;
 8001fce:	e002      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fd2:	60bb      	str	r3, [r7, #8]
      break;
 8001fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	00f42400 	.word	0x00f42400
 8001fe8:	007a1200 	.word	0x007a1200

08001fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000000 	.word	0x20000000

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002008:	f7ff fff0 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 800200c:	4601      	mov	r1, r0
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	0a9b      	lsrs	r3, r3, #10
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4a03      	ldr	r2, [pc, #12]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	08005c0c 	.word	0x08005c0c

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002030:	f7ff ffdc 	bl	8001fec <HAL_RCC_GetHCLKFreq>
 8002034:	4601      	mov	r1, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0b5b      	lsrs	r3, r3, #13
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4a03      	ldr	r2, [pc, #12]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	08005c0c 	.word	0x08005c0c

08002054 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	220f      	movs	r2, #15
 8002062:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0203 	and.w	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <HAL_RCC_GetClockConfig+0x5c>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_GetClockConfig+0x5c>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	08db      	lsrs	r3, r3, #3
 800208e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <HAL_RCC_GetClockConfig+0x60>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 020f 	and.w	r2, r3, #15
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40023c00 	.word	0x40023c00

080020b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e01d      	b.n	8002106 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f815 	bl	800210e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	4610      	mov	r0, r2
 80020f8:	f000 f968 	bl	80023cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b06      	cmp	r3, #6
 800214a:	d007      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b02      	cmp	r3, #2
 800217e:	d122      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d11b      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f06f 0202 	mvn.w	r2, #2
 8002196:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f8ee 	bl	800238e <HAL_TIM_IC_CaptureCallback>
 80021b2:	e005      	b.n	80021c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f8e0 	bl	800237a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f8f1 	bl	80023a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d122      	bne.n	800221a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d11b      	bne.n	800221a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f06f 0204 	mvn.w	r2, #4
 80021ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f8c4 	bl	800238e <HAL_TIM_IC_CaptureCallback>
 8002206:	e005      	b.n	8002214 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f8b6 	bl	800237a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8c7 	bl	80023a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b08      	cmp	r3, #8
 8002226:	d122      	bne.n	800226e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b08      	cmp	r3, #8
 8002234:	d11b      	bne.n	800226e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f06f 0208 	mvn.w	r2, #8
 800223e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2204      	movs	r2, #4
 8002244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f89a 	bl	800238e <HAL_TIM_IC_CaptureCallback>
 800225a:	e005      	b.n	8002268 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f88c 	bl	800237a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f89d 	bl	80023a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b10      	cmp	r3, #16
 800227a:	d122      	bne.n	80022c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b10      	cmp	r3, #16
 8002288:	d11b      	bne.n	80022c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f06f 0210 	mvn.w	r2, #16
 8002292:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2208      	movs	r2, #8
 8002298:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f870 	bl	800238e <HAL_TIM_IC_CaptureCallback>
 80022ae:	e005      	b.n	80022bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f862 	bl	800237a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f873 	bl	80023a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d10e      	bne.n	80022ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d107      	bne.n	80022ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f06f 0201 	mvn.w	r2, #1
 80022e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7fe fdc1 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f8:	2b80      	cmp	r3, #128	; 0x80
 80022fa:	d10e      	bne.n	800231a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002306:	2b80      	cmp	r3, #128	; 0x80
 8002308:	d107      	bne.n	800231a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f903 	bl	8002520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b40      	cmp	r3, #64	; 0x40
 8002326:	d10e      	bne.n	8002346 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b40      	cmp	r3, #64	; 0x40
 8002334:	d107      	bne.n	8002346 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800233e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f838 	bl	80023b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b20      	cmp	r3, #32
 8002352:	d10e      	bne.n	8002372 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b20      	cmp	r3, #32
 8002360:	d107      	bne.n	8002372 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f06f 0220 	mvn.w	r2, #32
 800236a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f8cd 	bl	800250c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a40      	ldr	r2, [pc, #256]	; (80024e0 <TIM_Base_SetConfig+0x114>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d013      	beq.n	800240c <TIM_Base_SetConfig+0x40>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ea:	d00f      	beq.n	800240c <TIM_Base_SetConfig+0x40>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a3d      	ldr	r2, [pc, #244]	; (80024e4 <TIM_Base_SetConfig+0x118>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00b      	beq.n	800240c <TIM_Base_SetConfig+0x40>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a3c      	ldr	r2, [pc, #240]	; (80024e8 <TIM_Base_SetConfig+0x11c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <TIM_Base_SetConfig+0x40>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <TIM_Base_SetConfig+0x120>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <TIM_Base_SetConfig+0x40>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3a      	ldr	r2, [pc, #232]	; (80024f0 <TIM_Base_SetConfig+0x124>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d108      	bne.n	800241e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <TIM_Base_SetConfig+0x114>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d02b      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242c:	d027      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a2c      	ldr	r2, [pc, #176]	; (80024e4 <TIM_Base_SetConfig+0x118>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d023      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a2b      	ldr	r2, [pc, #172]	; (80024e8 <TIM_Base_SetConfig+0x11c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01f      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <TIM_Base_SetConfig+0x120>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01b      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <TIM_Base_SetConfig+0x124>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d017      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a28      	ldr	r2, [pc, #160]	; (80024f4 <TIM_Base_SetConfig+0x128>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <TIM_Base_SetConfig+0x12c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00f      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a26      	ldr	r2, [pc, #152]	; (80024fc <TIM_Base_SetConfig+0x130>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00b      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a25      	ldr	r2, [pc, #148]	; (8002500 <TIM_Base_SetConfig+0x134>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a24      	ldr	r2, [pc, #144]	; (8002504 <TIM_Base_SetConfig+0x138>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d003      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <TIM_Base_SetConfig+0x13c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d108      	bne.n	8002490 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <TIM_Base_SetConfig+0x114>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <TIM_Base_SetConfig+0xf8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <TIM_Base_SetConfig+0x124>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d103      	bne.n	80024cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	615a      	str	r2, [r3, #20]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40000800 	.word	0x40000800
 80024ec:	40000c00 	.word	0x40000c00
 80024f0:	40010400 	.word	0x40010400
 80024f4:	40014000 	.word	0x40014000
 80024f8:	40014400 	.word	0x40014400
 80024fc:	40014800 	.word	0x40014800
 8002500:	40001800 	.word	0x40001800
 8002504:	40001c00 	.word	0x40001c00
 8002508:	40002000 	.word	0x40002000

0800250c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e03f      	b.n	80025c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe fcca 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2224      	movs	r2, #36	; 0x24
 8002564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fb4b 	bl	8002c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800258c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800259c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b088      	sub	sp, #32
 80025d2:	af02      	add	r7, sp, #8
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	f040 8083 	bne.w	80026f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_UART_Transmit+0x2e>
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e07b      	b.n	80026f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_UART_Transmit+0x40>
 800260a:	2302      	movs	r3, #2
 800260c:	e074      	b.n	80026f8 <HAL_UART_Transmit+0x12a>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2221      	movs	r2, #33	; 0x21
 8002620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002624:	f7fe fde0 	bl	80011e8 <HAL_GetTick>
 8002628:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	88fa      	ldrh	r2, [r7, #6]
 800262e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	88fa      	ldrh	r2, [r7, #6]
 8002634:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800263e:	e042      	b.n	80026c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002656:	d122      	bne.n	800269e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2200      	movs	r2, #0
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f96a 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e042      	b.n	80026f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002684:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d103      	bne.n	8002696 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3302      	adds	r3, #2
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	e017      	b.n	80026c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3301      	adds	r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	e013      	b.n	80026c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2200      	movs	r2, #0
 80026a6:	2180      	movs	r1, #128	; 0x80
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f947 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e01f      	b.n	80026f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	60ba      	str	r2, [r7, #8]
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1b7      	bne.n	8002640 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2200      	movs	r2, #0
 80026d8:	2140      	movs	r1, #64	; 0x40
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f92e 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e006      	b.n	80026f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10d      	bne.n	8002752 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_UART_IRQHandler+0x52>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f9e0 	bl	8002b10 <UART_Receive_IT>
      return;
 8002750:	e0d1      	b.n	80028f6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80b0 	beq.w	80028ba <HAL_UART_IRQHandler+0x1ba>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <HAL_UART_IRQHandler+0x70>
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80a5 	beq.w	80028ba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_UART_IRQHandler+0x90>
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	f043 0201 	orr.w	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_UART_IRQHandler+0xb0>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a8:	f043 0202 	orr.w	r2, r3, #2
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_UART_IRQHandler+0xd0>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	f043 0204 	orr.w	r2, r3, #4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00f      	beq.n	80027fa <HAL_UART_IRQHandler+0xfa>
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d104      	bne.n	80027ee <HAL_UART_IRQHandler+0xee>
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	f043 0208 	orr.w	r2, r3, #8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d078      	beq.n	80028f4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_UART_IRQHandler+0x11c>
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f97a 	bl	8002b10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <HAL_UART_IRQHandler+0x144>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d031      	beq.n	80028a8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f8c3 	bl	80029d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d123      	bne.n	80028a0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002866:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	4a21      	ldr	r2, [pc, #132]	; (80028fc <HAL_UART_IRQHandler+0x1fc>)
 8002876:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fda1 	bl	80013c4 <HAL_DMA_Abort_IT>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d016      	beq.n	80028b6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002892:	4610      	mov	r0, r2
 8002894:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002896:	e00e      	b.n	80028b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f845 	bl	8002928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289e:	e00a      	b.n	80028b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f841 	bl	8002928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a6:	e006      	b.n	80028b6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f83d 	bl	8002928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80028b4:	e01e      	b.n	80028f4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b6:	bf00      	nop
    return;
 80028b8:	e01c      	b.n	80028f4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_UART_IRQHandler+0x1d6>
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f8b0 	bl	8002a34 <UART_Transmit_IT>
    return;
 80028d4:	e00f      	b.n	80028f6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_UART_IRQHandler+0x1f6>
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8f8 	bl	8002ae0 <UART_EndTransmit_IT>
    return;
 80028f0:	bf00      	nop
 80028f2:	e000      	b.n	80028f6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80028f4:	bf00      	nop
  }
}
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	08002a0d 	.word	0x08002a0d

08002900 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	e02c      	b.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d028      	beq.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <UART_WaitOnFlagUntilTimeout+0x30>
 800295c:	f7fe fc44 	bl	80011e8 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	429a      	cmp	r2, r3
 800296a:	d21d      	bcs.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800297a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e00f      	b.n	80029c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4013      	ands	r3, r2
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d0c3      	beq.n	800294e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7ff ff7e 	bl	8002928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b21      	cmp	r3, #33	; 0x21
 8002a46:	d144      	bne.n	8002ad2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a50:	d11a      	bne.n	8002a88 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a66:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	621a      	str	r2, [r3, #32]
 8002a7a:	e00e      	b.n	8002a9a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	621a      	str	r2, [r3, #32]
 8002a86:	e008      	b.n	8002a9a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	1c59      	adds	r1, r3, #1
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6211      	str	r1, [r2, #32]
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10f      	bne.n	8002ace <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002abc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002acc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002af6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fefd 	bl	8002900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b22      	cmp	r3, #34	; 0x22
 8002b22:	d171      	bne.n	8002c08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2c:	d123      	bne.n	8002b76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10e      	bne.n	8002b5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	1c9a      	adds	r2, r3, #2
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
 8002b58:	e029      	b.n	8002bae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28
 8002b74:	e01b      	b.n	8002bae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6858      	ldr	r0, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	1c59      	adds	r1, r3, #1
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6291      	str	r1, [r2, #40]	; 0x28
 8002b8e:	b2c2      	uxtb	r2, r0
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e00c      	b.n	8002bae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	1c58      	adds	r0, r3, #1
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	6288      	str	r0, [r1, #40]	; 0x28
 8002ba6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d120      	bne.n	8002c04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0220 	bic.w	r2, r2, #32
 8002bd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff fe8a 	bl	8002914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e002      	b.n	8002c0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
  }
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c18:	b085      	sub	sp, #20
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c56:	f023 030c 	bic.w	r3, r3, #12
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	68f9      	ldr	r1, [r7, #12]
 8002c60:	430b      	orrs	r3, r1
 8002c62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c82:	f040 818b 	bne.w	8002f9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4ac1      	ldr	r2, [pc, #772]	; (8002f90 <UART_SetConfig+0x37c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d005      	beq.n	8002c9c <UART_SetConfig+0x88>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4abf      	ldr	r2, [pc, #764]	; (8002f94 <UART_SetConfig+0x380>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	f040 80bd 	bne.w	8002e16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c9c:	f7ff f9c6 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002ca0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	461d      	mov	r5, r3
 8002ca6:	f04f 0600 	mov.w	r6, #0
 8002caa:	46a8      	mov	r8, r5
 8002cac:	46b1      	mov	r9, r6
 8002cae:	eb18 0308 	adds.w	r3, r8, r8
 8002cb2:	eb49 0409 	adc.w	r4, r9, r9
 8002cb6:	4698      	mov	r8, r3
 8002cb8:	46a1      	mov	r9, r4
 8002cba:	eb18 0805 	adds.w	r8, r8, r5
 8002cbe:	eb49 0906 	adc.w	r9, r9, r6
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cd6:	4688      	mov	r8, r1
 8002cd8:	4691      	mov	r9, r2
 8002cda:	eb18 0005 	adds.w	r0, r8, r5
 8002cde:	eb49 0106 	adc.w	r1, r9, r6
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	461d      	mov	r5, r3
 8002ce8:	f04f 0600 	mov.w	r6, #0
 8002cec:	196b      	adds	r3, r5, r5
 8002cee:	eb46 0406 	adc.w	r4, r6, r6
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	f7fd fad3 	bl	80002a0 <__aeabi_uldivmod>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4ba5      	ldr	r3, [pc, #660]	; (8002f98 <UART_SetConfig+0x384>)
 8002d02:	fba3 2302 	umull	r2, r3, r3, r2
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	461d      	mov	r5, r3
 8002d10:	f04f 0600 	mov.w	r6, #0
 8002d14:	46a9      	mov	r9, r5
 8002d16:	46b2      	mov	sl, r6
 8002d18:	eb19 0309 	adds.w	r3, r9, r9
 8002d1c:	eb4a 040a 	adc.w	r4, sl, sl
 8002d20:	4699      	mov	r9, r3
 8002d22:	46a2      	mov	sl, r4
 8002d24:	eb19 0905 	adds.w	r9, r9, r5
 8002d28:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d40:	4689      	mov	r9, r1
 8002d42:	4692      	mov	sl, r2
 8002d44:	eb19 0005 	adds.w	r0, r9, r5
 8002d48:	eb4a 0106 	adc.w	r1, sl, r6
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	461d      	mov	r5, r3
 8002d52:	f04f 0600 	mov.w	r6, #0
 8002d56:	196b      	adds	r3, r5, r5
 8002d58:	eb46 0406 	adc.w	r4, r6, r6
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4623      	mov	r3, r4
 8002d60:	f7fd fa9e 	bl	80002a0 <__aeabi_uldivmod>
 8002d64:	4603      	mov	r3, r0
 8002d66:	460c      	mov	r4, r1
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b8b      	ldr	r3, [pc, #556]	; (8002f98 <UART_SetConfig+0x384>)
 8002d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	2164      	movs	r1, #100	; 0x64
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	3332      	adds	r3, #50	; 0x32
 8002d7e:	4a86      	ldr	r2, [pc, #536]	; (8002f98 <UART_SetConfig+0x384>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d8c:	4498      	add	r8, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	461d      	mov	r5, r3
 8002d92:	f04f 0600 	mov.w	r6, #0
 8002d96:	46a9      	mov	r9, r5
 8002d98:	46b2      	mov	sl, r6
 8002d9a:	eb19 0309 	adds.w	r3, r9, r9
 8002d9e:	eb4a 040a 	adc.w	r4, sl, sl
 8002da2:	4699      	mov	r9, r3
 8002da4:	46a2      	mov	sl, r4
 8002da6:	eb19 0905 	adds.w	r9, r9, r5
 8002daa:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dae:	f04f 0100 	mov.w	r1, #0
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dc2:	4689      	mov	r9, r1
 8002dc4:	4692      	mov	sl, r2
 8002dc6:	eb19 0005 	adds.w	r0, r9, r5
 8002dca:	eb4a 0106 	adc.w	r1, sl, r6
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	461d      	mov	r5, r3
 8002dd4:	f04f 0600 	mov.w	r6, #0
 8002dd8:	196b      	adds	r3, r5, r5
 8002dda:	eb46 0406 	adc.w	r4, r6, r6
 8002dde:	461a      	mov	r2, r3
 8002de0:	4623      	mov	r3, r4
 8002de2:	f7fd fa5d 	bl	80002a0 <__aeabi_uldivmod>
 8002de6:	4603      	mov	r3, r0
 8002de8:	460c      	mov	r4, r1
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b6a      	ldr	r3, [pc, #424]	; (8002f98 <UART_SetConfig+0x384>)
 8002dee:	fba3 1302 	umull	r1, r3, r3, r2
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	2164      	movs	r1, #100	; 0x64
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	3332      	adds	r3, #50	; 0x32
 8002e00:	4a65      	ldr	r2, [pc, #404]	; (8002f98 <UART_SetConfig+0x384>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	f003 0207 	and.w	r2, r3, #7
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4442      	add	r2, r8
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	e26f      	b.n	80032f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e16:	f7ff f8f5 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8002e1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	461d      	mov	r5, r3
 8002e20:	f04f 0600 	mov.w	r6, #0
 8002e24:	46a8      	mov	r8, r5
 8002e26:	46b1      	mov	r9, r6
 8002e28:	eb18 0308 	adds.w	r3, r8, r8
 8002e2c:	eb49 0409 	adc.w	r4, r9, r9
 8002e30:	4698      	mov	r8, r3
 8002e32:	46a1      	mov	r9, r4
 8002e34:	eb18 0805 	adds.w	r8, r8, r5
 8002e38:	eb49 0906 	adc.w	r9, r9, r6
 8002e3c:	f04f 0100 	mov.w	r1, #0
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e50:	4688      	mov	r8, r1
 8002e52:	4691      	mov	r9, r2
 8002e54:	eb18 0005 	adds.w	r0, r8, r5
 8002e58:	eb49 0106 	adc.w	r1, r9, r6
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	461d      	mov	r5, r3
 8002e62:	f04f 0600 	mov.w	r6, #0
 8002e66:	196b      	adds	r3, r5, r5
 8002e68:	eb46 0406 	adc.w	r4, r6, r6
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4623      	mov	r3, r4
 8002e70:	f7fd fa16 	bl	80002a0 <__aeabi_uldivmod>
 8002e74:	4603      	mov	r3, r0
 8002e76:	460c      	mov	r4, r1
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b47      	ldr	r3, [pc, #284]	; (8002f98 <UART_SetConfig+0x384>)
 8002e7c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	461d      	mov	r5, r3
 8002e8a:	f04f 0600 	mov.w	r6, #0
 8002e8e:	46a9      	mov	r9, r5
 8002e90:	46b2      	mov	sl, r6
 8002e92:	eb19 0309 	adds.w	r3, r9, r9
 8002e96:	eb4a 040a 	adc.w	r4, sl, sl
 8002e9a:	4699      	mov	r9, r3
 8002e9c:	46a2      	mov	sl, r4
 8002e9e:	eb19 0905 	adds.w	r9, r9, r5
 8002ea2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eba:	4689      	mov	r9, r1
 8002ebc:	4692      	mov	sl, r2
 8002ebe:	eb19 0005 	adds.w	r0, r9, r5
 8002ec2:	eb4a 0106 	adc.w	r1, sl, r6
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	461d      	mov	r5, r3
 8002ecc:	f04f 0600 	mov.w	r6, #0
 8002ed0:	196b      	adds	r3, r5, r5
 8002ed2:	eb46 0406 	adc.w	r4, r6, r6
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4623      	mov	r3, r4
 8002eda:	f7fd f9e1 	bl	80002a0 <__aeabi_uldivmod>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <UART_SetConfig+0x384>)
 8002ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2164      	movs	r1, #100	; 0x64
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	3332      	adds	r3, #50	; 0x32
 8002ef8:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <UART_SetConfig+0x384>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f06:	4498      	add	r8, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	461d      	mov	r5, r3
 8002f0c:	f04f 0600 	mov.w	r6, #0
 8002f10:	46a9      	mov	r9, r5
 8002f12:	46b2      	mov	sl, r6
 8002f14:	eb19 0309 	adds.w	r3, r9, r9
 8002f18:	eb4a 040a 	adc.w	r4, sl, sl
 8002f1c:	4699      	mov	r9, r3
 8002f1e:	46a2      	mov	sl, r4
 8002f20:	eb19 0905 	adds.w	r9, r9, r5
 8002f24:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f3c:	4689      	mov	r9, r1
 8002f3e:	4692      	mov	sl, r2
 8002f40:	eb19 0005 	adds.w	r0, r9, r5
 8002f44:	eb4a 0106 	adc.w	r1, sl, r6
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	461d      	mov	r5, r3
 8002f4e:	f04f 0600 	mov.w	r6, #0
 8002f52:	196b      	adds	r3, r5, r5
 8002f54:	eb46 0406 	adc.w	r4, r6, r6
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	f7fd f9a0 	bl	80002a0 <__aeabi_uldivmod>
 8002f60:	4603      	mov	r3, r0
 8002f62:	460c      	mov	r4, r1
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <UART_SetConfig+0x384>)
 8002f68:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	2164      	movs	r1, #100	; 0x64
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	3332      	adds	r3, #50	; 0x32
 8002f7a:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <UART_SetConfig+0x384>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	f003 0207 	and.w	r2, r3, #7
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4442      	add	r2, r8
 8002f8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002f8e:	e1b2      	b.n	80032f6 <UART_SetConfig+0x6e2>
 8002f90:	40011000 	.word	0x40011000
 8002f94:	40011400 	.word	0x40011400
 8002f98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4ad7      	ldr	r2, [pc, #860]	; (8003300 <UART_SetConfig+0x6ec>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d005      	beq.n	8002fb2 <UART_SetConfig+0x39e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4ad6      	ldr	r2, [pc, #856]	; (8003304 <UART_SetConfig+0x6f0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	f040 80d1 	bne.w	8003154 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fb2:	f7ff f83b 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002fb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	469a      	mov	sl, r3
 8002fbc:	f04f 0b00 	mov.w	fp, #0
 8002fc0:	46d0      	mov	r8, sl
 8002fc2:	46d9      	mov	r9, fp
 8002fc4:	eb18 0308 	adds.w	r3, r8, r8
 8002fc8:	eb49 0409 	adc.w	r4, r9, r9
 8002fcc:	4698      	mov	r8, r3
 8002fce:	46a1      	mov	r9, r4
 8002fd0:	eb18 080a 	adds.w	r8, r8, sl
 8002fd4:	eb49 090b 	adc.w	r9, r9, fp
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fe4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fe8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fec:	4688      	mov	r8, r1
 8002fee:	4691      	mov	r9, r2
 8002ff0:	eb1a 0508 	adds.w	r5, sl, r8
 8002ff4:	eb4b 0609 	adc.w	r6, fp, r9
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	f04f 0400 	mov.w	r4, #0
 800300a:	0094      	lsls	r4, r2, #2
 800300c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003010:	008b      	lsls	r3, r1, #2
 8003012:	461a      	mov	r2, r3
 8003014:	4623      	mov	r3, r4
 8003016:	4628      	mov	r0, r5
 8003018:	4631      	mov	r1, r6
 800301a:	f7fd f941 	bl	80002a0 <__aeabi_uldivmod>
 800301e:	4603      	mov	r3, r0
 8003020:	460c      	mov	r4, r1
 8003022:	461a      	mov	r2, r3
 8003024:	4bb8      	ldr	r3, [pc, #736]	; (8003308 <UART_SetConfig+0x6f4>)
 8003026:	fba3 2302 	umull	r2, r3, r3, r2
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	469b      	mov	fp, r3
 8003034:	f04f 0c00 	mov.w	ip, #0
 8003038:	46d9      	mov	r9, fp
 800303a:	46e2      	mov	sl, ip
 800303c:	eb19 0309 	adds.w	r3, r9, r9
 8003040:	eb4a 040a 	adc.w	r4, sl, sl
 8003044:	4699      	mov	r9, r3
 8003046:	46a2      	mov	sl, r4
 8003048:	eb19 090b 	adds.w	r9, r9, fp
 800304c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003050:	f04f 0100 	mov.w	r1, #0
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800305c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003060:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003064:	4689      	mov	r9, r1
 8003066:	4692      	mov	sl, r2
 8003068:	eb1b 0509 	adds.w	r5, fp, r9
 800306c:	eb4c 060a 	adc.w	r6, ip, sl
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4619      	mov	r1, r3
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	f04f 0400 	mov.w	r4, #0
 8003082:	0094      	lsls	r4, r2, #2
 8003084:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003088:	008b      	lsls	r3, r1, #2
 800308a:	461a      	mov	r2, r3
 800308c:	4623      	mov	r3, r4
 800308e:	4628      	mov	r0, r5
 8003090:	4631      	mov	r1, r6
 8003092:	f7fd f905 	bl	80002a0 <__aeabi_uldivmod>
 8003096:	4603      	mov	r3, r0
 8003098:	460c      	mov	r4, r1
 800309a:	461a      	mov	r2, r3
 800309c:	4b9a      	ldr	r3, [pc, #616]	; (8003308 <UART_SetConfig+0x6f4>)
 800309e:	fba3 1302 	umull	r1, r3, r3, r2
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2164      	movs	r1, #100	; 0x64
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	3332      	adds	r3, #50	; 0x32
 80030b0:	4a95      	ldr	r2, [pc, #596]	; (8003308 <UART_SetConfig+0x6f4>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030bc:	4498      	add	r8, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	469b      	mov	fp, r3
 80030c2:	f04f 0c00 	mov.w	ip, #0
 80030c6:	46d9      	mov	r9, fp
 80030c8:	46e2      	mov	sl, ip
 80030ca:	eb19 0309 	adds.w	r3, r9, r9
 80030ce:	eb4a 040a 	adc.w	r4, sl, sl
 80030d2:	4699      	mov	r9, r3
 80030d4:	46a2      	mov	sl, r4
 80030d6:	eb19 090b 	adds.w	r9, r9, fp
 80030da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030f2:	4689      	mov	r9, r1
 80030f4:	4692      	mov	sl, r2
 80030f6:	eb1b 0509 	adds.w	r5, fp, r9
 80030fa:	eb4c 060a 	adc.w	r6, ip, sl
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4619      	mov	r1, r3
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f04f 0400 	mov.w	r4, #0
 8003110:	0094      	lsls	r4, r2, #2
 8003112:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003116:	008b      	lsls	r3, r1, #2
 8003118:	461a      	mov	r2, r3
 800311a:	4623      	mov	r3, r4
 800311c:	4628      	mov	r0, r5
 800311e:	4631      	mov	r1, r6
 8003120:	f7fd f8be 	bl	80002a0 <__aeabi_uldivmod>
 8003124:	4603      	mov	r3, r0
 8003126:	460c      	mov	r4, r1
 8003128:	461a      	mov	r2, r3
 800312a:	4b77      	ldr	r3, [pc, #476]	; (8003308 <UART_SetConfig+0x6f4>)
 800312c:	fba3 1302 	umull	r1, r3, r3, r2
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	2164      	movs	r1, #100	; 0x64
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	3332      	adds	r3, #50	; 0x32
 800313e:	4a72      	ldr	r2, [pc, #456]	; (8003308 <UART_SetConfig+0x6f4>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	f003 020f 	and.w	r2, r3, #15
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4442      	add	r2, r8
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	e0d0      	b.n	80032f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003154:	f7fe ff56 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8003158:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	469a      	mov	sl, r3
 800315e:	f04f 0b00 	mov.w	fp, #0
 8003162:	46d0      	mov	r8, sl
 8003164:	46d9      	mov	r9, fp
 8003166:	eb18 0308 	adds.w	r3, r8, r8
 800316a:	eb49 0409 	adc.w	r4, r9, r9
 800316e:	4698      	mov	r8, r3
 8003170:	46a1      	mov	r9, r4
 8003172:	eb18 080a 	adds.w	r8, r8, sl
 8003176:	eb49 090b 	adc.w	r9, r9, fp
 800317a:	f04f 0100 	mov.w	r1, #0
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003186:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800318a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800318e:	4688      	mov	r8, r1
 8003190:	4691      	mov	r9, r2
 8003192:	eb1a 0508 	adds.w	r5, sl, r8
 8003196:	eb4b 0609 	adc.w	r6, fp, r9
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4619      	mov	r1, r3
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	f04f 0400 	mov.w	r4, #0
 80031ac:	0094      	lsls	r4, r2, #2
 80031ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031b2:	008b      	lsls	r3, r1, #2
 80031b4:	461a      	mov	r2, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	4628      	mov	r0, r5
 80031ba:	4631      	mov	r1, r6
 80031bc:	f7fd f870 	bl	80002a0 <__aeabi_uldivmod>
 80031c0:	4603      	mov	r3, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b50      	ldr	r3, [pc, #320]	; (8003308 <UART_SetConfig+0x6f4>)
 80031c8:	fba3 2302 	umull	r2, r3, r3, r2
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	469b      	mov	fp, r3
 80031d6:	f04f 0c00 	mov.w	ip, #0
 80031da:	46d9      	mov	r9, fp
 80031dc:	46e2      	mov	sl, ip
 80031de:	eb19 0309 	adds.w	r3, r9, r9
 80031e2:	eb4a 040a 	adc.w	r4, sl, sl
 80031e6:	4699      	mov	r9, r3
 80031e8:	46a2      	mov	sl, r4
 80031ea:	eb19 090b 	adds.w	r9, r9, fp
 80031ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031f2:	f04f 0100 	mov.w	r1, #0
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003202:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003206:	4689      	mov	r9, r1
 8003208:	4692      	mov	sl, r2
 800320a:	eb1b 0509 	adds.w	r5, fp, r9
 800320e:	eb4c 060a 	adc.w	r6, ip, sl
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4619      	mov	r1, r3
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	f04f 0400 	mov.w	r4, #0
 8003224:	0094      	lsls	r4, r2, #2
 8003226:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800322a:	008b      	lsls	r3, r1, #2
 800322c:	461a      	mov	r2, r3
 800322e:	4623      	mov	r3, r4
 8003230:	4628      	mov	r0, r5
 8003232:	4631      	mov	r1, r6
 8003234:	f7fd f834 	bl	80002a0 <__aeabi_uldivmod>
 8003238:	4603      	mov	r3, r0
 800323a:	460c      	mov	r4, r1
 800323c:	461a      	mov	r2, r3
 800323e:	4b32      	ldr	r3, [pc, #200]	; (8003308 <UART_SetConfig+0x6f4>)
 8003240:	fba3 1302 	umull	r1, r3, r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	2164      	movs	r1, #100	; 0x64
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	3332      	adds	r3, #50	; 0x32
 8003252:	4a2d      	ldr	r2, [pc, #180]	; (8003308 <UART_SetConfig+0x6f4>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800325e:	4498      	add	r8, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	469b      	mov	fp, r3
 8003264:	f04f 0c00 	mov.w	ip, #0
 8003268:	46d9      	mov	r9, fp
 800326a:	46e2      	mov	sl, ip
 800326c:	eb19 0309 	adds.w	r3, r9, r9
 8003270:	eb4a 040a 	adc.w	r4, sl, sl
 8003274:	4699      	mov	r9, r3
 8003276:	46a2      	mov	sl, r4
 8003278:	eb19 090b 	adds.w	r9, r9, fp
 800327c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003280:	f04f 0100 	mov.w	r1, #0
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800328c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003290:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003294:	4689      	mov	r9, r1
 8003296:	4692      	mov	sl, r2
 8003298:	eb1b 0509 	adds.w	r5, fp, r9
 800329c:	eb4c 060a 	adc.w	r6, ip, sl
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4619      	mov	r1, r3
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	f04f 0400 	mov.w	r4, #0
 80032b2:	0094      	lsls	r4, r2, #2
 80032b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032b8:	008b      	lsls	r3, r1, #2
 80032ba:	461a      	mov	r2, r3
 80032bc:	4623      	mov	r3, r4
 80032be:	4628      	mov	r0, r5
 80032c0:	4631      	mov	r1, r6
 80032c2:	f7fc ffed 	bl	80002a0 <__aeabi_uldivmod>
 80032c6:	4603      	mov	r3, r0
 80032c8:	460c      	mov	r4, r1
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <UART_SetConfig+0x6f4>)
 80032ce:	fba3 1302 	umull	r1, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2164      	movs	r1, #100	; 0x64
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	3332      	adds	r3, #50	; 0x32
 80032e0:	4a09      	ldr	r2, [pc, #36]	; (8003308 <UART_SetConfig+0x6f4>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4442      	add	r2, r8
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	e7ff      	b.n	80032f6 <UART_SetConfig+0x6e2>
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003300:	40011000 	.word	0x40011000
 8003304:	40011400 	.word	0x40011400
 8003308:	51eb851f 	.word	0x51eb851f

0800330c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f103 0208 	add.w	r2, r3, #8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f04f 32ff 	mov.w	r2, #4294967295
 8003324:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f103 0208 	add.w	r2, r3, #8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f103 0208 	add.w	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d103      	bne.n	80033ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e00c      	b.n	80033e8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3308      	adds	r3, #8
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e002      	b.n	80033dc <vListInsert+0x2e>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d2f6      	bcs.n	80033d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	601a      	str	r2, [r3, #0]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6892      	ldr	r2, [r2, #8]
 8003436:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6852      	ldr	r2, [r2, #4]
 8003440:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d103      	bne.n	8003454 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	1e5a      	subs	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <xQueueGenericReset+0x28>
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	e7fe      	b.n	800349a <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 800349c:	f001 fc78 	bl	8004d90 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	441a      	add	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	3b01      	subs	r3, #1
 80034ce:	68f9      	ldr	r1, [r7, #12]
 80034d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	441a      	add	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	22ff      	movs	r2, #255	; 0xff
 80034e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	22ff      	movs	r2, #255	; 0xff
 80034e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <xQueueGenericReset+0x92>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00f      	beq.n	800351a <xQueueGenericReset+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3310      	adds	r3, #16
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 ff98 	bl	8004434 <xTaskRemoveFromEventList>
 8003504:	e009      	b.n	800351a <xQueueGenericReset+0xa6>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	3310      	adds	r3, #16
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fefe 	bl	800330c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3324      	adds	r3, #36	; 0x24
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fef9 	bl	800330c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800351a:	f001 fc67 	bl	8004dec <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800351e:	2301      	movs	r3, #1
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003528:	b580      	push	{r7, lr}
 800352a:	b08c      	sub	sp, #48	; 0x30
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <xQueueGenericCreate+0x28>
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	e7fe      	b.n	800354e <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d006      	beq.n	800356e <xQueueGenericCreate+0x46>
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	429a      	cmp	r2, r3
 800356c:	d101      	bne.n	8003572 <xQueueGenericCreate+0x4a>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <xQueueGenericCreate+0x4c>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <xQueueGenericCreate+0x64>
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	e7fe      	b.n	800358a <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003592:	d909      	bls.n	80035a8 <xQueueGenericCreate+0x80>
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e7fe      	b.n	80035a6 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	3350      	adds	r3, #80	; 0x50
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 fccb 	bl	8004f48 <pvPortMalloc>
 80035b2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3350      	adds	r3, #80	; 0x50
 80035c2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035c4:	79fa      	ldrb	r2, [r7, #7]
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f805 	bl	80035e0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80035d6:	6a3b      	ldr	r3, [r7, #32]
    }
 80035d8:	4618      	mov	r0, r3
 80035da:	3728      	adds	r7, #40	; 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e002      	b.n	8003602 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800360e:	2101      	movs	r1, #1
 8003610:	69b8      	ldr	r0, [r7, #24]
 8003612:	f7ff ff2f 	bl	8003474 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003646:	2300      	movs	r3, #0
 8003648:	2200      	movs	r2, #0
 800364a:	2100      	movs	r1, #0
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f84d 	bl	80036ec <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	4603      	mov	r3, r0
 8003662:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003664:	2301      	movs	r3, #1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	2300      	movs	r3, #0
 800366a:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	461a      	mov	r2, r3
 8003670:	6939      	ldr	r1, [r7, #16]
 8003672:	6978      	ldr	r0, [r7, #20]
 8003674:	f7ff ff58 	bl	8003528 <xQueueGenericCreate>
 8003678:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f7ff ffd3 	bl	8003626 <prvInitialiseMutex>

        return xNewQueue;
 8003680:	68fb      	ldr	r3, [r7, #12]
    }
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <xQueueCreateCountingSemaphore+0x24>
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	e7fe      	b.n	80036ac <xQueueCreateCountingSemaphore+0x22>
        configASSERT( uxInitialCount <= uxMaxCount );
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d909      	bls.n	80036ca <xQueueCreateCountingSemaphore+0x40>
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e7fe      	b.n	80036c8 <xQueueCreateCountingSemaphore+0x3e>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80036ca:	2202      	movs	r2, #2
 80036cc:	2100      	movs	r1, #0
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ff2a 	bl	8003528 <xQueueGenericCreate>
 80036d4:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <xQueueCreateCountingSemaphore+0x58>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 80036e2:	697b      	ldr	r3, [r7, #20]
    }
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08c      	sub	sp, #48	; 0x30
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036fa:	2300      	movs	r3, #0
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <xQueueGenericSend+0x30>
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	623b      	str	r3, [r7, #32]
 800371a:	e7fe      	b.n	800371a <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <xQueueGenericSend+0x3e>
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <xQueueGenericSend+0x42>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <xQueueGenericSend+0x44>
 800372e:	2300      	movs	r3, #0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <xQueueGenericSend+0x5c>
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	e7fe      	b.n	8003746 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d103      	bne.n	8003756 <xQueueGenericSend+0x6a>
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <xQueueGenericSend+0x6e>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <xQueueGenericSend+0x70>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <xQueueGenericSend+0x88>
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	e7fe      	b.n	8003772 <xQueueGenericSend+0x86>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003774:	f001 fb0c 	bl	8004d90 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	429a      	cmp	r2, r3
 8003782:	d302      	bcc.n	800378a <xQueueGenericSend+0x9e>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d112      	bne.n	80037b0 <xQueueGenericSend+0xc4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003790:	f000 f976 	bl	8003a80 <prvCopyDataToQueue>
 8003794:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d004      	beq.n	80037a8 <xQueueGenericSend+0xbc>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	3324      	adds	r3, #36	; 0x24
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fe46 	bl	8004434 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80037a8:	f001 fb20 	bl	8004dec <vPortExitCritical>
                return pdPASS;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e062      	b.n	8003876 <xQueueGenericSend+0x18a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <xQueueGenericSend+0xd2>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80037b6:	f001 fb19 	bl	8004dec <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e05b      	b.n	8003876 <xQueueGenericSend+0x18a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fe95 	bl	80044f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80037ce:	2301      	movs	r3, #1
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80037d2:	f001 fb0b 	bl	8004dec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80037d6:	f000 fc7f 	bl	80040d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80037da:	f001 fad9 	bl	8004d90 <vPortEnterCritical>
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037e4:	b25b      	sxtb	r3, r3
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d103      	bne.n	80037f4 <xQueueGenericSend+0x108>
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d103      	bne.n	800380a <xQueueGenericSend+0x11e>
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800380a:	f001 faef 	bl	8004dec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800380e:	1d3a      	adds	r2, r7, #4
 8003810:	f107 0310 	add.w	r3, r7, #16
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fe84 	bl	8004524 <xTaskCheckForTimeOut>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d123      	bne.n	800386a <xQueueGenericSend+0x17e>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003824:	f000 f9fe 	bl	8003c24 <prvIsQueueFull>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d017      	beq.n	800385e <xQueueGenericSend+0x172>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	3310      	adds	r3, #16
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fdd8 	bl	80043ec <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800383c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800383e:	f000 f989 	bl	8003b54 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003842:	f000 fc57 	bl	80040f4 <xTaskResumeAll>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d193      	bne.n	8003774 <xQueueGenericSend+0x88>
                {
                    portYIELD_WITHIN_API();
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <xQueueGenericSend+0x194>)
 800384e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	e78a      	b.n	8003774 <xQueueGenericSend+0x88>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800385e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003860:	f000 f978 	bl	8003b54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003864:	f000 fc46 	bl	80040f4 <xTaskResumeAll>
 8003868:	e784      	b.n	8003774 <xQueueGenericSend+0x88>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800386a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800386c:	f000 f972 	bl	8003b54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003870:	f000 fc40 	bl	80040f4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003874:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003876:	4618      	mov	r0, r3
 8003878:	3730      	adds	r7, #48	; 0x30
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	e000ed04 	.word	0xe000ed04

08003884 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08c      	sub	sp, #48	; 0x30
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800388e:	2300      	movs	r3, #0
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003896:	2300      	movs	r3, #0
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <xQueueSemaphoreTake+0x30>
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e7fe      	b.n	80038b2 <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <xQueueSemaphoreTake+0x4c>
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e7fe      	b.n	80038ce <xQueueSemaphoreTake+0x4a>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80038d0:	f001 fa5e 	bl	8004d90 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d019      	beq.n	8003914 <xQueueSemaphoreTake+0x90>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	1e5a      	subs	r2, r3, #1
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <xQueueSemaphoreTake+0x76>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80038f0:	f001 f8ac 	bl	8004a4c <pvTaskIncrementMutexHeldCount>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d004      	beq.n	800390c <xQueueSemaphoreTake+0x88>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	3310      	adds	r3, #16
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fd94 	bl	8004434 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800390c:	f001 fa6e 	bl	8004dec <vPortExitCritical>
                return pdPASS;
 8003910:	2301      	movs	r3, #1
 8003912:	e096      	b.n	8003a42 <xQueueSemaphoreTake+0x1be>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d110      	bne.n	800393c <xQueueSemaphoreTake+0xb8>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <xQueueSemaphoreTake+0xb0>
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	e7fe      	b.n	8003932 <xQueueSemaphoreTake+0xae>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003934:	f001 fa5a 	bl	8004dec <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003938:	2300      	movs	r3, #0
 800393a:	e082      	b.n	8003a42 <xQueueSemaphoreTake+0x1be>
                }
                else if( xEntryTimeSet == pdFALSE )
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <xQueueSemaphoreTake+0xcc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003942:	f107 0308 	add.w	r3, r7, #8
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fdd6 	bl	80044f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003950:	f001 fa4c 	bl	8004dec <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003954:	f000 fbc0 	bl	80040d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003958:	f001 fa1a 	bl	8004d90 <vPortEnterCritical>
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003962:	b25b      	sxtb	r3, r3
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003968:	d103      	bne.n	8003972 <xQueueSemaphoreTake+0xee>
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003978:	b25b      	sxtb	r3, r3
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397e:	d103      	bne.n	8003988 <xQueueSemaphoreTake+0x104>
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003988:	f001 fa30 	bl	8004dec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800398c:	463a      	mov	r2, r7
 800398e:	f107 0308 	add.w	r3, r7, #8
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fdc5 	bl	8004524 <xTaskCheckForTimeOut>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d132      	bne.n	8003a06 <xQueueSemaphoreTake+0x182>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a2:	f000 f929 	bl	8003bf8 <prvIsQueueEmpty>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d026      	beq.n	80039fa <xQueueSemaphoreTake+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <xQueueSemaphoreTake+0x144>
                        {
                            taskENTER_CRITICAL();
 80039b4:	f001 f9ec 	bl	8004d90 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 fecb 	bl	8004758 <xTaskPriorityInherit>
 80039c2:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 80039c4:	f001 fa12 	bl	8004dec <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	3324      	adds	r3, #36	; 0x24
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fd0b 	bl	80043ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80039d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039d8:	f000 f8bc 	bl	8003b54 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80039dc:	f000 fb8a 	bl	80040f4 <xTaskResumeAll>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f47f af74 	bne.w	80038d0 <xQueueSemaphoreTake+0x4c>
                {
                    portYIELD_WITHIN_API();
 80039e8:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <xQueueSemaphoreTake+0x1c8>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	e76a      	b.n	80038d0 <xQueueSemaphoreTake+0x4c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80039fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039fc:	f000 f8aa 	bl	8003b54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003a00:	f000 fb78 	bl	80040f4 <xTaskResumeAll>
 8003a04:	e764      	b.n	80038d0 <xQueueSemaphoreTake+0x4c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a08:	f000 f8a4 	bl	8003b54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003a0c:	f000 fb72 	bl	80040f4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a12:	f000 f8f1 	bl	8003bf8 <prvIsQueueEmpty>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f43f af59 	beq.w	80038d0 <xQueueSemaphoreTake+0x4c>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <xQueueSemaphoreTake+0x1bc>
                        {
                            taskENTER_CRITICAL();
 8003a24:	f001 f9b4 	bl	8004d90 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a2a:	f000 f811 	bl	8003a50 <prvGetDisinheritPriorityAfterTimeout>
 8003a2e:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	69f9      	ldr	r1, [r7, #28]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 ff7c 	bl	8004934 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003a3c:	f001 f9d6 	bl	8004dec <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003a40:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3730      	adds	r7, #48	; 0x30
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d006      	beq.n	8003a6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f1c3 0305 	rsb	r3, r3, #5
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e001      	b.n	8003a72 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003a72:	68fb      	ldr	r3, [r7, #12]
    }
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10d      	bne.n	8003aba <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d14d      	bne.n	8003b42 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 feca 	bl	8004844 <xTaskPriorityDisinherit>
 8003ab0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	e043      	b.n	8003b42 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d119      	bne.n	8003af4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6858      	ldr	r0, [r3, #4]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	f001 fc5e 	bl	800538c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	441a      	add	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d32b      	bcc.n	8003b42 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	e026      	b.n	8003b42 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68d8      	ldr	r0, [r3, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	461a      	mov	r2, r3
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	f001 fc44 	bl	800538c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	425b      	negs	r3, r3
 8003b0e:	441a      	add	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d207      	bcs.n	8003b30 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	425b      	negs	r3, r3
 8003b2a:	441a      	add	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d105      	bne.n	8003b42 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003b4a:	697b      	ldr	r3, [r7, #20]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003b5c:	f001 f918 	bl	8004d90 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b66:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b68:	e011      	b.n	8003b8e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d012      	beq.n	8003b98 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3324      	adds	r3, #36	; 0x24
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fc5c 	bl	8004434 <xTaskRemoveFromEventList>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003b82:	f000 fd33 	bl	80045ec <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	dce9      	bgt.n	8003b6a <prvUnlockQueue+0x16>
 8003b96:	e000      	b.n	8003b9a <prvUnlockQueue+0x46>
                        break;
 8003b98:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	22ff      	movs	r2, #255	; 0xff
 8003b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003ba2:	f001 f923 	bl	8004dec <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003ba6:	f001 f8f3 	bl	8004d90 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bb0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bb2:	e011      	b.n	8003bd8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d012      	beq.n	8003be2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3310      	adds	r3, #16
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fc37 	bl	8004434 <xTaskRemoveFromEventList>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003bcc:	f000 fd0e 	bl	80045ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003bd0:	7bbb      	ldrb	r3, [r7, #14]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	dce9      	bgt.n	8003bb4 <prvUnlockQueue+0x60>
 8003be0:	e000      	b.n	8003be4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003be2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	22ff      	movs	r2, #255	; 0xff
 8003be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003bec:	f001 f8fe 	bl	8004dec <vPortExitCritical>
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003c00:	f001 f8c6 	bl	8004d90 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e001      	b.n	8003c16 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003c16:	f001 f8e9 	bl	8004dec <vPortExitCritical>

    return xReturn;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003c2c:	f001 f8b0 	bl	8004d90 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d102      	bne.n	8003c42 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e001      	b.n	8003c46 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003c46:	f001 f8d1 	bl	8004dec <vPortExitCritical>

    return xReturn;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08c      	sub	sp, #48	; 0x30
 8003c58:	af04      	add	r7, sp, #16
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 f96d 	bl	8004f48 <pvPortMalloc>
 8003c6e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00e      	beq.n	8003c94 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c76:	2058      	movs	r0, #88	; 0x58
 8003c78:	f001 f966 	bl	8004f48 <pvPortMalloc>
 8003c7c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
 8003c8a:	e005      	b.n	8003c98 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003c8c:	6978      	ldr	r0, [r7, #20]
 8003c8e:	f001 fa37 	bl	8005100 <vPortFree>
 8003c92:	e001      	b.n	8003c98 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d013      	beq.n	8003cc6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9303      	str	r3, [sp, #12]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	9302      	str	r3, [sp, #8]
 8003ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f80e 	bl	8003cd6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003cba:	69f8      	ldr	r0, [r7, #28]
 8003cbc:	f000 f8a0 	bl	8003e00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	e002      	b.n	8003ccc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cca:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
    }
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b088      	sub	sp, #32
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	461a      	mov	r2, r3
 8003cee:	21a5      	movs	r1, #165	; 0xa5
 8003cf0:	f001 fb57 	bl	80053a2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f023 0307 	bic.w	r3, r3, #7
 8003d0c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <prvInitialiseNewTask+0x56>
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	e7fe      	b.n	8003d2a <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01f      	beq.n	8003d72 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e012      	b.n	8003d5e <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	7819      	ldrb	r1, [r3, #0]
 8003d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	3334      	adds	r3, #52	; 0x34
 8003d48:	460a      	mov	r2, r1
 8003d4a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d006      	beq.n	8003d66 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	2b09      	cmp	r3, #9
 8003d62:	d9e9      	bls.n	8003d38 <prvInitialiseNewTask+0x62>
 8003d64:	e000      	b.n	8003d68 <prvInitialiseNewTask+0x92>
            {
                break;
 8003d66:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d70:	e003      	b.n	8003d7a <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d901      	bls.n	8003d84 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d80:	2304      	movs	r3, #4
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d8e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	2200      	movs	r2, #0
 8003d94:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fad6 	bl	800334c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	3318      	adds	r3, #24
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fad1 	bl	800334c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	f1c3 0205 	rsb	r2, r3, #5
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	3350      	adds	r3, #80	; 0x50
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 faea 	bl	80053a2 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	3354      	adds	r3, #84	; 0x54
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 fae3 	bl	80053a2 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	68f9      	ldr	r1, [r7, #12]
 8003de0:	69b8      	ldr	r0, [r7, #24]
 8003de2:	f000 fead 	bl	8004b40 <pxPortInitialiseStack>
 8003de6:	4602      	mov	r2, r0
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003df8:	bf00      	nop
 8003dfa:	3720      	adds	r7, #32
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003e08:	f000 ffc2 	bl	8004d90 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003e0c:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <prvAddNewTaskToReadyList+0xa8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3301      	adds	r3, #1
 8003e12:	4a25      	ldr	r2, [pc, #148]	; (8003ea8 <prvAddNewTaskToReadyList+0xa8>)
 8003e14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003e16:	4b25      	ldr	r3, [pc, #148]	; (8003eac <prvAddNewTaskToReadyList+0xac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003e1e:	4a23      	ldr	r2, [pc, #140]	; (8003eac <prvAddNewTaskToReadyList+0xac>)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <prvAddNewTaskToReadyList+0xa8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d110      	bne.n	8003e4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003e2c:	f000 fbfc 	bl	8004628 <prvInitialiseTaskLists>
 8003e30:	e00d      	b.n	8003e4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003e32:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <prvAddNewTaskToReadyList+0xb0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e3a:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <prvAddNewTaskToReadyList+0xac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d802      	bhi.n	8003e4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003e48:	4a18      	ldr	r2, [pc, #96]	; (8003eac <prvAddNewTaskToReadyList+0xac>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003e4e:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <prvAddNewTaskToReadyList+0xb4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3301      	adds	r3, #1
 8003e54:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <prvAddNewTaskToReadyList+0xb4>)
 8003e56:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e58:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <prvAddNewTaskToReadyList+0xb4>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	2201      	movs	r2, #1
 8003e66:	409a      	lsls	r2, r3
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <prvAddNewTaskToReadyList+0xb8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <prvAddNewTaskToReadyList+0xb8>)
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4a0f      	ldr	r2, [pc, #60]	; (8003ebc <prvAddNewTaskToReadyList+0xbc>)
 8003e80:	441a      	add	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f7ff fa6c 	bl	8003366 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003e8e:	f000 ffad 	bl	8004dec <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003e92:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <prvAddNewTaskToReadyList+0xb0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e9a:	4b04      	ldr	r3, [pc, #16]	; (8003eac <prvAddNewTaskToReadyList+0xac>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000194 	.word	0x20000194
 8003eac:	200000bc 	.word	0x200000bc
 8003eb0:	200001a0 	.word	0x200001a0
 8003eb4:	200001b0 	.word	0x200001b0
 8003eb8:	2000019c 	.word	0x2000019c
 8003ebc:	200000c0 	.word	0x200000c0

08003ec0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003ec8:	f000 ff62 	bl	8004d90 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d102      	bne.n	8003ed8 <vTaskDelete+0x18>
 8003ed2:	4b38      	ldr	r3, [pc, #224]	; (8003fb4 <vTaskDelete+0xf4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	e000      	b.n	8003eda <vTaskDelete+0x1a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fa9d 	bl	8003420 <uxListRemove>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d115      	bne.n	8003f18 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef0:	4931      	ldr	r1, [pc, #196]	; (8003fb8 <vTaskDelete+0xf8>)
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <vTaskDelete+0x58>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	2201      	movs	r2, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43da      	mvns	r2, r3
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <vTaskDelete+0xfc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4013      	ands	r3, r2
 8003f14:	4a29      	ldr	r2, [pc, #164]	; (8003fbc <vTaskDelete+0xfc>)
 8003f16:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3318      	adds	r3, #24
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fa7b 	bl	8003420 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003f2a:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <vTaskDelete+0x100>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <vTaskDelete+0x100>)
 8003f32:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8003f34:	4b1f      	ldr	r3, [pc, #124]	; (8003fb4 <vTaskDelete+0xf4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d10b      	bne.n	8003f56 <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	481f      	ldr	r0, [pc, #124]	; (8003fc4 <vTaskDelete+0x104>)
 8003f46:	f7ff fa0e 	bl	8003366 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003f4a:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <vTaskDelete+0x108>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <vTaskDelete+0x108>)
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	e009      	b.n	8003f6a <vTaskDelete+0xaa>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <vTaskDelete+0x10c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <vTaskDelete+0x10c>)
 8003f5e:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
                prvDeleteTCB( pxTCB );
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fbcd 	bl	8004700 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003f66:	f000 fbdb 	bl	8004720 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003f6a:	f000 ff3f 	bl	8004dec <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003f6e:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <vTaskDelete+0x110>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01a      	beq.n	8003fac <vTaskDelete+0xec>
        {
            if( pxTCB == pxCurrentTCB )
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <vTaskDelete+0xf4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d115      	bne.n	8003fac <vTaskDelete+0xec>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <vTaskDelete+0x114>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <vTaskDelete+0xdc>
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	e7fe      	b.n	8003f9a <vTaskDelete+0xda>
                portYIELD_WITHIN_API();
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <vTaskDelete+0x118>)
 8003f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	200000bc 	.word	0x200000bc
 8003fb8:	200000c0 	.word	0x200000c0
 8003fbc:	2000019c 	.word	0x2000019c
 8003fc0:	200001b0 	.word	0x200001b0
 8003fc4:	20000168 	.word	0x20000168
 8003fc8:	2000017c 	.word	0x2000017c
 8003fcc:	20000194 	.word	0x20000194
 8003fd0:	200001a0 	.word	0x200001a0
 8003fd4:	200001bc 	.word	0x200001bc
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <vTaskDelay+0x60>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <vTaskDelay+0x2e>
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	e7fe      	b.n	8004008 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 800400a:	f000 f865 	bl	80040d8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800400e:	2100      	movs	r1, #0
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fd2f 	bl	8004a74 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004016:	f000 f86d 	bl	80040f4 <xTaskResumeAll>
 800401a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <vTaskDelay+0x64>)
 8004024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	200001bc 	.word	0x200001bc
 8004040:	e000ed04 	.word	0xe000ed04

08004044 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <vTaskStartScheduler+0x78>)
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	2300      	movs	r3, #0
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	2300      	movs	r3, #0
 8004054:	2282      	movs	r2, #130	; 0x82
 8004056:	491a      	ldr	r1, [pc, #104]	; (80040c0 <vTaskStartScheduler+0x7c>)
 8004058:	481a      	ldr	r0, [pc, #104]	; (80040c4 <vTaskStartScheduler+0x80>)
 800405a:	f7ff fdfb 	bl	8003c54 <xTaskCreate>
 800405e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d115      	bne.n	8004092 <vTaskStartScheduler+0x4e>
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004078:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <vTaskStartScheduler+0x84>)
 800407a:	f04f 32ff 	mov.w	r2, #4294967295
 800407e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004080:	4b12      	ldr	r3, [pc, #72]	; (80040cc <vTaskStartScheduler+0x88>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <vTaskStartScheduler+0x8c>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800408c:	f000 fde2 	bl	8004c54 <xPortStartScheduler>
 8004090:	e00d      	b.n	80040ae <vTaskStartScheduler+0x6a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004098:	d109      	bne.n	80040ae <vTaskStartScheduler+0x6a>
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	e7fe      	b.n	80040ac <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <vTaskStartScheduler+0x90>)
 80040b0:	681b      	ldr	r3, [r3, #0]
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200001b8 	.word	0x200001b8
 80040c0:	08005bf4 	.word	0x08005bf4
 80040c4:	08004605 	.word	0x08004605
 80040c8:	200001b4 	.word	0x200001b4
 80040cc:	200001a0 	.word	0x200001a0
 80040d0:	20000198 	.word	0x20000198
 80040d4:	2000000c 	.word	0x2000000c

080040d8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80040dc:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <vTaskSuspendAll+0x18>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3301      	adds	r3, #1
 80040e2:	4a03      	ldr	r2, [pc, #12]	; (80040f0 <vTaskSuspendAll+0x18>)
 80040e4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80040e6:	bf00      	nop
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	200001bc 	.word	0x200001bc

080040f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004102:	4b3b      	ldr	r3, [pc, #236]	; (80041f0 <xTaskResumeAll+0xfc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <xTaskResumeAll+0x2a>
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	e7fe      	b.n	800411c <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800411e:	f000 fe37 	bl	8004d90 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004122:	4b33      	ldr	r3, [pc, #204]	; (80041f0 <xTaskResumeAll+0xfc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3b01      	subs	r3, #1
 8004128:	4a31      	ldr	r2, [pc, #196]	; (80041f0 <xTaskResumeAll+0xfc>)
 800412a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800412c:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <xTaskResumeAll+0xfc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d155      	bne.n	80041e0 <xTaskResumeAll+0xec>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004134:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <xTaskResumeAll+0x100>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d051      	beq.n	80041e0 <xTaskResumeAll+0xec>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800413c:	e02e      	b.n	800419c <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800413e:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <xTaskResumeAll+0x104>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3318      	adds	r3, #24
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff f968 	bl	8003420 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3304      	adds	r3, #4
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff f963 	bl	8003420 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	2201      	movs	r2, #1
 8004160:	409a      	lsls	r2, r3
 8004162:	4b26      	ldr	r3, [pc, #152]	; (80041fc <xTaskResumeAll+0x108>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	4a24      	ldr	r2, [pc, #144]	; (80041fc <xTaskResumeAll+0x108>)
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4a21      	ldr	r2, [pc, #132]	; (8004200 <xTaskResumeAll+0x10c>)
 800417a:	441a      	add	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f7ff f8ef 	bl	8003366 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <xTaskResumeAll+0x110>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <xTaskResumeAll+0x114>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <xTaskResumeAll+0x104>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1cc      	bne.n	800413e <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80041aa:	f000 fab9 	bl	8004720 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041ae:	4b17      	ldr	r3, [pc, #92]	; (800420c <xTaskResumeAll+0x118>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80041ba:	f000 f829 	bl	8004210 <xTaskIncrementTick>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <xTaskResumeAll+0x114>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f1      	bne.n	80041ba <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <xTaskResumeAll+0x118>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <xTaskResumeAll+0x114>)
 80041de:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80041e0:	f000 fe04 	bl	8004dec <vPortExitCritical>

    return xAlreadyYielded;
 80041e4:	687b      	ldr	r3, [r7, #4]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200001bc 	.word	0x200001bc
 80041f4:	20000194 	.word	0x20000194
 80041f8:	20000154 	.word	0x20000154
 80041fc:	2000019c 	.word	0x2000019c
 8004200:	200000c0 	.word	0x200000c0
 8004204:	200000bc 	.word	0x200000bc
 8004208:	200001a8 	.word	0x200001a8
 800420c:	200001a4 	.word	0x200001a4

08004210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800421a:	4b3e      	ldr	r3, [pc, #248]	; (8004314 <xTaskIncrementTick+0x104>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d16e      	bne.n	8004300 <xTaskIncrementTick+0xf0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004222:	4b3d      	ldr	r3, [pc, #244]	; (8004318 <xTaskIncrementTick+0x108>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3301      	adds	r3, #1
 8004228:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800422a:	4a3b      	ldr	r2, [pc, #236]	; (8004318 <xTaskIncrementTick+0x108>)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11f      	bne.n	8004276 <xTaskIncrementTick+0x66>
        {
            taskSWITCH_DELAYED_LISTS();
 8004236:	4b39      	ldr	r3, [pc, #228]	; (800431c <xTaskIncrementTick+0x10c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d009      	beq.n	8004254 <xTaskIncrementTick+0x44>
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	e7fe      	b.n	8004252 <xTaskIncrementTick+0x42>
 8004254:	4b31      	ldr	r3, [pc, #196]	; (800431c <xTaskIncrementTick+0x10c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	4b31      	ldr	r3, [pc, #196]	; (8004320 <xTaskIncrementTick+0x110>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2f      	ldr	r2, [pc, #188]	; (800431c <xTaskIncrementTick+0x10c>)
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4a2f      	ldr	r2, [pc, #188]	; (8004320 <xTaskIncrementTick+0x110>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <xTaskIncrementTick+0x114>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3301      	adds	r3, #1
 800426e:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <xTaskIncrementTick+0x114>)
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	f000 fa55 	bl	8004720 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004276:	4b2c      	ldr	r3, [pc, #176]	; (8004328 <xTaskIncrementTick+0x118>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d344      	bcc.n	800430a <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004280:	4b26      	ldr	r3, [pc, #152]	; (800431c <xTaskIncrementTick+0x10c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d104      	bne.n	8004294 <xTaskIncrementTick+0x84>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428a:	4b27      	ldr	r3, [pc, #156]	; (8004328 <xTaskIncrementTick+0x118>)
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	601a      	str	r2, [r3, #0]
                    break;
 8004292:	e03a      	b.n	800430a <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004294:	4b21      	ldr	r3, [pc, #132]	; (800431c <xTaskIncrementTick+0x10c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d203      	bcs.n	80042b4 <xTaskIncrementTick+0xa4>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80042ac:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <xTaskIncrementTick+0x118>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042b2:	e02a      	b.n	800430a <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff f8b1 	bl	8003420 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <xTaskIncrementTick+0xc0>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	3318      	adds	r3, #24
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff f8a8 	bl	8003420 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	2201      	movs	r2, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <xTaskIncrementTick+0x11c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4313      	orrs	r3, r2
 80042de:	4a13      	ldr	r2, [pc, #76]	; (800432c <xTaskIncrementTick+0x11c>)
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <xTaskIncrementTick+0x120>)
 80042f0:	441a      	add	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f7ff f834 	bl	8003366 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042fe:	e7bf      	b.n	8004280 <xTaskIncrementTick+0x70>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <xTaskIncrementTick+0x124>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	4a0b      	ldr	r2, [pc, #44]	; (8004334 <xTaskIncrementTick+0x124>)
 8004308:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800430a:	697b      	ldr	r3, [r7, #20]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	200001bc 	.word	0x200001bc
 8004318:	20000198 	.word	0x20000198
 800431c:	2000014c 	.word	0x2000014c
 8004320:	20000150 	.word	0x20000150
 8004324:	200001ac 	.word	0x200001ac
 8004328:	200001b4 	.word	0x200001b4
 800432c:	2000019c 	.word	0x2000019c
 8004330:	200000c0 	.word	0x200000c0
 8004334:	200001a4 	.word	0x200001a4

08004338 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800433e:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <vTaskSwitchContext+0xa0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004346:	4b25      	ldr	r3, [pc, #148]	; (80043dc <vTaskSwitchContext+0xa4>)
 8004348:	2201      	movs	r2, #1
 800434a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800434c:	e03e      	b.n	80043cc <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 800434e:	4b23      	ldr	r3, [pc, #140]	; (80043dc <vTaskSwitchContext+0xa4>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004354:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <vTaskSwitchContext+0xa8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	fab3 f383 	clz	r3, r3
 8004360:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004362:	7afb      	ldrb	r3, [r7, #11]
 8004364:	f1c3 031f 	rsb	r3, r3, #31
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	491e      	ldr	r1, [pc, #120]	; (80043e4 <vTaskSwitchContext+0xac>)
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <vTaskSwitchContext+0x5a>
        __asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	e7fe      	b.n	8004390 <vTaskSwitchContext+0x58>
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4a11      	ldr	r2, [pc, #68]	; (80043e4 <vTaskSwitchContext+0xac>)
 800439e:	4413      	add	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	605a      	str	r2, [r3, #4]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	3308      	adds	r3, #8
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d104      	bne.n	80043c2 <vTaskSwitchContext+0x8a>
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4a07      	ldr	r2, [pc, #28]	; (80043e8 <vTaskSwitchContext+0xb0>)
 80043ca:	6013      	str	r3, [r2, #0]
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	200001bc 	.word	0x200001bc
 80043dc:	200001a8 	.word	0x200001a8
 80043e0:	2000019c 	.word	0x2000019c
 80043e4:	200000c0 	.word	0x200000c0
 80043e8:	200000bc 	.word	0x200000bc

080043ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <vTaskPlaceOnEventList+0x24>
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e7fe      	b.n	800440e <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <vTaskPlaceOnEventList+0x44>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3318      	adds	r3, #24
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fe ffc8 	bl	80033ae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800441e:	2101      	movs	r1, #1
 8004420:	6838      	ldr	r0, [r7, #0]
 8004422:	f000 fb27 	bl	8004a74 <prvAddCurrentTaskToDelayedList>
}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	200000bc 	.word	0x200000bc

08004434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <xTaskRemoveFromEventList+0x2a>
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e7fe      	b.n	800445c <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3318      	adds	r3, #24
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe ffdc 	bl	8003420 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004468:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <xTaskRemoveFromEventList+0xac>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d11c      	bne.n	80044aa <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	3304      	adds	r3, #4
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe ffd3 	bl	8003420 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	2201      	movs	r2, #1
 8004480:	409a      	lsls	r2, r3
 8004482:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <xTaskRemoveFromEventList+0xb0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4313      	orrs	r3, r2
 8004488:	4a16      	ldr	r2, [pc, #88]	; (80044e4 <xTaskRemoveFromEventList+0xb0>)
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <xTaskRemoveFromEventList+0xb4>)
 800449a:	441a      	add	r2, r3
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f7fe ff5f 	bl	8003366 <vListInsertEnd>
 80044a8:	e005      	b.n	80044b6 <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	3318      	adds	r3, #24
 80044ae:	4619      	mov	r1, r3
 80044b0:	480e      	ldr	r0, [pc, #56]	; (80044ec <xTaskRemoveFromEventList+0xb8>)
 80044b2:	f7fe ff58 	bl	8003366 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <xTaskRemoveFromEventList+0xbc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d905      	bls.n	80044d0 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80044c4:	2301      	movs	r3, #1
 80044c6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <xTaskRemoveFromEventList+0xc0>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	e001      	b.n	80044d4 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80044d4:	697b      	ldr	r3, [r7, #20]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	200001bc 	.word	0x200001bc
 80044e4:	2000019c 	.word	0x2000019c
 80044e8:	200000c0 	.word	0x200000c0
 80044ec:	20000154 	.word	0x20000154
 80044f0:	200000bc 	.word	0x200000bc
 80044f4:	200001a8 	.word	0x200001a8

080044f8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <vTaskInternalSetTimeOutState+0x24>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004508:	4b05      	ldr	r3, [pc, #20]	; (8004520 <vTaskInternalSetTimeOutState+0x28>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	605a      	str	r2, [r3, #4]
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	200001ac 	.word	0x200001ac
 8004520:	20000198 	.word	0x20000198

08004524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <xTaskCheckForTimeOut+0x24>
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	e7fe      	b.n	8004546 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <xTaskCheckForTimeOut+0x3e>
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e7fe      	b.n	8004560 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8004562:	f000 fc15 	bl	8004d90 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004566:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <xTaskCheckForTimeOut+0xc0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d102      	bne.n	8004586 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	e026      	b.n	80045d4 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b17      	ldr	r3, [pc, #92]	; (80045e8 <xTaskCheckForTimeOut+0xc4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d00a      	beq.n	80045a8 <xTaskCheckForTimeOut+0x84>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	429a      	cmp	r2, r3
 800459a:	d305      	bcc.n	80045a8 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e015      	b.n	80045d4 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d20b      	bcs.n	80045ca <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	1ad2      	subs	r2, r2, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff ff9a 	bl	80044f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	e004      	b.n	80045d4 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80045d4:	f000 fc0a 	bl	8004dec <vPortExitCritical>

    return xReturn;
 80045d8:	69fb      	ldr	r3, [r7, #28]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000198 	.word	0x20000198
 80045e8:	200001ac 	.word	0x200001ac

080045ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80045f0:	4b03      	ldr	r3, [pc, #12]	; (8004600 <vTaskMissedYield+0x14>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	200001a8 	.word	0x200001a8

08004604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800460c:	f000 f84c 	bl	80046a8 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <prvIdleTask+0x20>)
 8004612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004620:	e7f4      	b.n	800460c <prvIdleTask+0x8>
 8004622:	bf00      	nop
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	e00c      	b.n	800464e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4a12      	ldr	r2, [pc, #72]	; (8004688 <prvInitialiseTaskLists+0x60>)
 8004640:	4413      	add	r3, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fe62 	bl	800330c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3301      	adds	r3, #1
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d9ef      	bls.n	8004634 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004654:	480d      	ldr	r0, [pc, #52]	; (800468c <prvInitialiseTaskLists+0x64>)
 8004656:	f7fe fe59 	bl	800330c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800465a:	480d      	ldr	r0, [pc, #52]	; (8004690 <prvInitialiseTaskLists+0x68>)
 800465c:	f7fe fe56 	bl	800330c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004660:	480c      	ldr	r0, [pc, #48]	; (8004694 <prvInitialiseTaskLists+0x6c>)
 8004662:	f7fe fe53 	bl	800330c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004666:	480c      	ldr	r0, [pc, #48]	; (8004698 <prvInitialiseTaskLists+0x70>)
 8004668:	f7fe fe50 	bl	800330c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800466c:	480b      	ldr	r0, [pc, #44]	; (800469c <prvInitialiseTaskLists+0x74>)
 800466e:	f7fe fe4d 	bl	800330c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <prvInitialiseTaskLists+0x78>)
 8004674:	4a05      	ldr	r2, [pc, #20]	; (800468c <prvInitialiseTaskLists+0x64>)
 8004676:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <prvInitialiseTaskLists+0x7c>)
 800467a:	4a05      	ldr	r2, [pc, #20]	; (8004690 <prvInitialiseTaskLists+0x68>)
 800467c:	601a      	str	r2, [r3, #0]
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	200000c0 	.word	0x200000c0
 800468c:	20000124 	.word	0x20000124
 8004690:	20000138 	.word	0x20000138
 8004694:	20000154 	.word	0x20000154
 8004698:	20000168 	.word	0x20000168
 800469c:	20000180 	.word	0x20000180
 80046a0:	2000014c 	.word	0x2000014c
 80046a4:	20000150 	.word	0x20000150

080046a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046ae:	e019      	b.n	80046e4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80046b0:	f000 fb6e 	bl	8004d90 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <prvCheckTasksWaitingTermination+0x4c>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe fead 	bl	8003420 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80046c6:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <prvCheckTasksWaitingTermination+0x50>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <prvCheckTasksWaitingTermination+0x50>)
 80046ce:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <prvCheckTasksWaitingTermination+0x54>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <prvCheckTasksWaitingTermination+0x54>)
 80046d8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80046da:	f000 fb87 	bl	8004dec <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f80e 	bl	8004700 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <prvCheckTasksWaitingTermination+0x54>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e1      	bne.n	80046b0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000168 	.word	0x20000168
 80046f8:	20000194 	.word	0x20000194
 80046fc:	2000017c 	.word	0x2000017c

08004700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fcf7 	bl	8005100 <vPortFree>
                vPortFree( pxTCB );
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fcf4 	bl	8005100 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <prvResetNextTaskUnblockTime+0x30>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <prvResetNextTaskUnblockTime+0x34>)
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004736:	e005      	b.n	8004744 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <prvResetNextTaskUnblockTime+0x30>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a04      	ldr	r2, [pc, #16]	; (8004754 <prvResetNextTaskUnblockTime+0x34>)
 8004742:	6013      	str	r3, [r2, #0]
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	2000014c 	.word	0x2000014c
 8004754:	200001b4 	.word	0x200001b4

08004758 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d05e      	beq.n	800482c <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004772:	4b31      	ldr	r3, [pc, #196]	; (8004838 <xTaskPriorityInherit+0xe0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	429a      	cmp	r2, r3
 800477a:	d24e      	bcs.n	800481a <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	db06      	blt.n	8004792 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004784:	4b2c      	ldr	r3, [pc, #176]	; (8004838 <xTaskPriorityInherit+0xe0>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	f1c3 0205 	rsb	r2, r3, #5
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	6959      	ldr	r1, [r3, #20]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4a26      	ldr	r2, [pc, #152]	; (800483c <xTaskPriorityInherit+0xe4>)
 80047a4:	4413      	add	r3, r2
 80047a6:	4299      	cmp	r1, r3
 80047a8:	d12f      	bne.n	800480a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fe36 	bl	8003420 <uxListRemove>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10a      	bne.n	80047d0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	2201      	movs	r2, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43da      	mvns	r2, r3
 80047c6:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <xTaskPriorityInherit+0xe8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4013      	ands	r3, r2
 80047cc:	4a1c      	ldr	r2, [pc, #112]	; (8004840 <xTaskPriorityInherit+0xe8>)
 80047ce:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047d0:	4b19      	ldr	r3, [pc, #100]	; (8004838 <xTaskPriorityInherit+0xe0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	2201      	movs	r2, #1
 80047e0:	409a      	lsls	r2, r3
 80047e2:	4b17      	ldr	r3, [pc, #92]	; (8004840 <xTaskPriorityInherit+0xe8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	4a15      	ldr	r2, [pc, #84]	; (8004840 <xTaskPriorityInherit+0xe8>)
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4a10      	ldr	r2, [pc, #64]	; (800483c <xTaskPriorityInherit+0xe4>)
 80047fa:	441a      	add	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f7fe fdaf 	bl	8003366 <vListInsertEnd>
 8004808:	e004      	b.n	8004814 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <xTaskPriorityInherit+0xe0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004814:	2301      	movs	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e008      	b.n	800482c <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <xTaskPriorityInherit+0xe0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	429a      	cmp	r2, r3
 8004826:	d201      	bcs.n	800482c <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800482c:	68fb      	ldr	r3, [r7, #12]
    }
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	200000bc 	.word	0x200000bc
 800483c:	200000c0 	.word	0x200000c0
 8004840:	2000019c 	.word	0x2000019c

08004844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d061      	beq.n	800491e <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800485a:	4b33      	ldr	r3, [pc, #204]	; (8004928 <xTaskPriorityDisinherit+0xe4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	429a      	cmp	r2, r3
 8004862:	d009      	beq.n	8004878 <xTaskPriorityDisinherit+0x34>
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	e7fe      	b.n	8004876 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <xTaskPriorityDisinherit+0x50>
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	e7fe      	b.n	8004892 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004898:	1e5a      	subs	r2, r3, #1
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d039      	beq.n	800491e <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d135      	bne.n	800491e <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	3304      	adds	r3, #4
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe fdb2 	bl	8003420 <uxListRemove>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	2201      	movs	r2, #1
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43da      	mvns	r2, r3
 80048ce:	4b17      	ldr	r3, [pc, #92]	; (800492c <xTaskPriorityDisinherit+0xe8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4013      	ands	r3, r2
 80048d4:	4a15      	ldr	r2, [pc, #84]	; (800492c <xTaskPriorityDisinherit+0xe8>)
 80048d6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	f1c3 0205 	rsb	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	2201      	movs	r2, #1
 80048f2:	409a      	lsls	r2, r3
 80048f4:	4b0d      	ldr	r3, [pc, #52]	; (800492c <xTaskPriorityDisinherit+0xe8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	4a0c      	ldr	r2, [pc, #48]	; (800492c <xTaskPriorityDisinherit+0xe8>)
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4a09      	ldr	r2, [pc, #36]	; (8004930 <xTaskPriorityDisinherit+0xec>)
 800490c:	441a      	add	r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fe fd26 	bl	8003366 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800491a:	2301      	movs	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800491e:	697b      	ldr	r3, [r7, #20]
    }
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	200000bc 	.word	0x200000bc
 800492c:	2000019c 	.word	0x2000019c
 8004930:	200000c0 	.word	0x200000c0

08004934 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004942:	2301      	movs	r3, #1
 8004944:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d075      	beq.n	8004a38 <vTaskPriorityDisinheritAfterTimeout+0x104>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	e7fe      	b.n	8004966 <vTaskPriorityDisinheritAfterTimeout+0x32>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d902      	bls.n	8004978 <vTaskPriorityDisinheritAfterTimeout+0x44>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	e002      	b.n	800497e <vTaskPriorityDisinheritAfterTimeout+0x4a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497c:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	429a      	cmp	r2, r3
 8004986:	d057      	beq.n	8004a38 <vTaskPriorityDisinheritAfterTimeout+0x104>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	429a      	cmp	r2, r3
 8004990:	d152      	bne.n	8004a38 <vTaskPriorityDisinheritAfterTimeout+0x104>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004992:	4b2b      	ldr	r3, [pc, #172]	; (8004a40 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	429a      	cmp	r2, r3
 800499a:	d109      	bne.n	80049b0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	e7fe      	b.n	80049ae <vTaskPriorityDisinheritAfterTimeout+0x7a>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	db04      	blt.n	80049ce <vTaskPriorityDisinheritAfterTimeout+0x9a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f1c3 0205 	rsb	r2, r3, #5
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	6959      	ldr	r1, [r3, #20]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4a19      	ldr	r2, [pc, #100]	; (8004a44 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80049de:	4413      	add	r3, r2
 80049e0:	4299      	cmp	r1, r3
 80049e2:	d129      	bne.n	8004a38 <vTaskPriorityDisinheritAfterTimeout+0x104>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe fd19 	bl	8003420 <uxListRemove>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <vTaskPriorityDisinheritAfterTimeout+0xd6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	2201      	movs	r2, #1
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43da      	mvns	r2, r3
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4013      	ands	r3, r2
 8004a06:	4a10      	ldr	r2, [pc, #64]	; (8004a48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004a08:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	2201      	movs	r2, #1
 8004a10:	409a      	lsls	r2, r3
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	4a0b      	ldr	r2, [pc, #44]	; (8004a48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4a06      	ldr	r2, [pc, #24]	; (8004a44 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004a2a:	441a      	add	r2, r3
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f7fe fc97 	bl	8003366 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004a38:	bf00      	nop
 8004a3a:	3720      	adds	r7, #32
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	200000bc 	.word	0x200000bc
 8004a44:	200000c0 	.word	0x200000c0
 8004a48:	2000019c 	.word	0x2000019c

08004a4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a5e:	3201      	adds	r2, #1
 8004a60:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004a62:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a64:	681b      	ldr	r3, [r3, #0]
    }
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	200000bc 	.word	0x200000bc

08004a74 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004a7e:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a84:	4b28      	ldr	r3, [pc, #160]	; (8004b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fcc8 	bl	8003420 <uxListRemove>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a96:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43da      	mvns	r2, r3
 8004aa4:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	4a20      	ldr	r2, [pc, #128]	; (8004b2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004aac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d10a      	bne.n	8004acc <prvAddCurrentTaskToDelayedList+0x58>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	481a      	ldr	r0, [pc, #104]	; (8004b30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ac6:	f7fe fc4e 	bl	8003366 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004aca:	e026      	b.n	8004b1a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ad4:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d209      	bcs.n	8004af8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3304      	adds	r3, #4
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7fe fc5c 	bl	80033ae <vListInsert>
}
 8004af6:	e010      	b.n	8004b1a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3304      	adds	r3, #4
 8004b02:	4619      	mov	r1, r3
 8004b04:	4610      	mov	r0, r2
 8004b06:	f7fe fc52 	bl	80033ae <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d202      	bcs.n	8004b1a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004b14:	4a09      	ldr	r2, [pc, #36]	; (8004b3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	6013      	str	r3, [r2, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000198 	.word	0x20000198
 8004b28:	200000bc 	.word	0x200000bc
 8004b2c:	2000019c 	.word	0x2000019c
 8004b30:	20000180 	.word	0x20000180
 8004b34:	20000150 	.word	0x20000150
 8004b38:	2000014c 	.word	0x2000014c
 8004b3c:	200001b4 	.word	0x200001b4

08004b40 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3b04      	subs	r3, #4
 8004b50:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 0201 	bic.w	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3b04      	subs	r3, #4
 8004b6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004b70:	4a0c      	ldr	r2, [pc, #48]	; (8004ba4 <pxPortInitialiseStack+0x64>)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3b14      	subs	r3, #20
 8004b7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3b04      	subs	r3, #4
 8004b86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f06f 0202 	mvn.w	r2, #2
 8004b8e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3b20      	subs	r3, #32
 8004b94:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004b96:	68fb      	ldr	r3, [r7, #12]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	08004ba9 	.word	0x08004ba9

08004ba8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <prvTaskExitError+0x50>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d009      	beq.n	8004bd0 <prvTaskExitError+0x28>
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e7fe      	b.n	8004bce <prvTaskExitError+0x26>
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004be2:	bf00      	nop
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0fc      	beq.n	8004be4 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004bea:	bf00      	nop
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000010 	.word	0x20000010
 8004bfc:	00000000 	.word	0x00000000

08004c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <pxCurrentTCBConst2>)
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	6808      	ldr	r0, [r1, #0]
 8004c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0a:	f380 8809 	msr	PSP, r0
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8811 	msr	BASEPRI, r0
 8004c1a:	4770      	bx	lr
 8004c1c:	f3af 8000 	nop.w

08004c20 <pxCurrentTCBConst2>:
 8004c20:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop

08004c28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004c28:	4808      	ldr	r0, [pc, #32]	; (8004c4c <prvPortStartFirstTask+0x24>)
 8004c2a:	6800      	ldr	r0, [r0, #0]
 8004c2c:	6800      	ldr	r0, [r0, #0]
 8004c2e:	f380 8808 	msr	MSP, r0
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8814 	msr	CONTROL, r0
 8004c3a:	b662      	cpsie	i
 8004c3c:	b661      	cpsie	f
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	df00      	svc	0
 8004c48:	bf00      	nop
 8004c4a:	0000      	.short	0x0000
 8004c4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop

08004c54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c5a:	4b44      	ldr	r3, [pc, #272]	; (8004d6c <xPortStartScheduler+0x118>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a44      	ldr	r2, [pc, #272]	; (8004d70 <xPortStartScheduler+0x11c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d109      	bne.n	8004c78 <xPortStartScheduler+0x24>
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	e7fe      	b.n	8004c76 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c78:	4b3c      	ldr	r3, [pc, #240]	; (8004d6c <xPortStartScheduler+0x118>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a3d      	ldr	r2, [pc, #244]	; (8004d74 <xPortStartScheduler+0x120>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d109      	bne.n	8004c96 <xPortStartScheduler+0x42>
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e7fe      	b.n	8004c94 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c96:	4b38      	ldr	r3, [pc, #224]	; (8004d78 <xPortStartScheduler+0x124>)
 8004c98:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	22ff      	movs	r2, #255	; 0xff
 8004ca6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	4b30      	ldr	r3, [pc, #192]	; (8004d7c <xPortStartScheduler+0x128>)
 8004cbc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cbe:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <xPortStartScheduler+0x12c>)
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cc4:	e009      	b.n	8004cda <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004cc6:	4b2e      	ldr	r3, [pc, #184]	; (8004d80 <xPortStartScheduler+0x12c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	4a2c      	ldr	r2, [pc, #176]	; (8004d80 <xPortStartScheduler+0x12c>)
 8004cce:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b80      	cmp	r3, #128	; 0x80
 8004ce4:	d0ef      	beq.n	8004cc6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ce6:	4b26      	ldr	r3, [pc, #152]	; (8004d80 <xPortStartScheduler+0x12c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1c3 0307 	rsb	r3, r3, #7
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d009      	beq.n	8004d06 <xPortStartScheduler+0xb2>
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	60bb      	str	r3, [r7, #8]
 8004d04:	e7fe      	b.n	8004d04 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d06:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <xPortStartScheduler+0x12c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	4a1c      	ldr	r2, [pc, #112]	; (8004d80 <xPortStartScheduler+0x12c>)
 8004d0e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d10:	4b1b      	ldr	r3, [pc, #108]	; (8004d80 <xPortStartScheduler+0x12c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d18:	4a19      	ldr	r2, [pc, #100]	; (8004d80 <xPortStartScheduler+0x12c>)
 8004d1a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004d24:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <xPortStartScheduler+0x130>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <xPortStartScheduler+0x130>)
 8004d2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d2e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004d30:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <xPortStartScheduler+0x130>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <xPortStartScheduler+0x130>)
 8004d36:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d3a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004d3c:	f000 f8d4 	bl	8004ee8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004d40:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <xPortStartScheduler+0x134>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004d46:	f000 f8f3 	bl	8004f30 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d4a:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <xPortStartScheduler+0x138>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a0f      	ldr	r2, [pc, #60]	; (8004d8c <xPortStartScheduler+0x138>)
 8004d50:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d54:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004d56:	f7ff ff67 	bl	8004c28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d5a:	f7ff faed 	bl	8004338 <vTaskSwitchContext>
    prvTaskExitError();
 8004d5e:	f7ff ff23 	bl	8004ba8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	e000ed00 	.word	0xe000ed00
 8004d70:	410fc271 	.word	0x410fc271
 8004d74:	410fc270 	.word	0x410fc270
 8004d78:	e000e400 	.word	0xe000e400
 8004d7c:	200001c0 	.word	0x200001c0
 8004d80:	200001c4 	.word	0x200001c4
 8004d84:	e000ed20 	.word	0xe000ed20
 8004d88:	20000010 	.word	0x20000010
 8004d8c:	e000ef34 	.word	0xe000ef34

08004d90 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004da8:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <vPortEnterCritical+0x54>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3301      	adds	r3, #1
 8004dae:	4a0d      	ldr	r2, [pc, #52]	; (8004de4 <vPortEnterCritical+0x54>)
 8004db0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <vPortEnterCritical+0x54>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d10e      	bne.n	8004dd8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <vPortEnterCritical+0x58>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <vPortEnterCritical+0x48>
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	e7fe      	b.n	8004dd6 <vPortEnterCritical+0x46>
    }
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	20000010 	.word	0x20000010
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <vPortExitCritical+0x4c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <vPortExitCritical+0x22>
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	e7fe      	b.n	8004e0c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <vPortExitCritical+0x4c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <vPortExitCritical+0x4c>)
 8004e16:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <vPortExitCritical+0x4c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d104      	bne.n	8004e2a <vPortExitCritical+0x3e>
 8004e20:	2300      	movs	r3, #0
 8004e22:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	20000010 	.word	0x20000010
 8004e3c:	00000000 	.word	0x00000000

08004e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004e40:	f3ef 8009 	mrs	r0, PSP
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <pxCurrentTCBConst>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	f01e 0f10 	tst.w	lr, #16
 8004e50:	bf08      	it	eq
 8004e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5a:	6010      	str	r0, [r2, #0]
 8004e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e64:	f380 8811 	msr	BASEPRI, r0
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f7ff fa62 	bl	8004338 <vTaskSwitchContext>
 8004e74:	f04f 0000 	mov.w	r0, #0
 8004e78:	f380 8811 	msr	BASEPRI, r0
 8004e7c:	bc09      	pop	{r0, r3}
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	6808      	ldr	r0, [r1, #0]
 8004e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e86:	f01e 0f10 	tst.w	lr, #16
 8004e8a:	bf08      	it	eq
 8004e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e90:	f380 8809 	msr	PSP, r0
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	f3af 8000 	nop.w

08004ea0 <pxCurrentTCBConst>:
 8004ea0:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
        __asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	607b      	str	r3, [r7, #4]
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004ec0:	f7ff f9a6 	bl	8004210 <xTaskIncrementTick>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <SysTick_Handler+0x2a>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <SysTick_Handler+0x3c>)
 8004ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	f383 8811 	msr	BASEPRI, r3
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <vPortSetupTimerInterrupt+0x34>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <vPortSetupTimerInterrupt+0x38>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <vPortSetupTimerInterrupt+0x3c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <vPortSetupTimerInterrupt+0x40>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	099b      	lsrs	r3, r3, #6
 8004f04:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <vPortSetupTimerInterrupt+0x44>)
 8004f06:	3b01      	subs	r3, #1
 8004f08:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f0a:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <vPortSetupTimerInterrupt+0x34>)
 8004f0c:	2207      	movs	r2, #7
 8004f0e:	601a      	str	r2, [r3, #0]
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	e000e010 	.word	0xe000e010
 8004f20:	e000e018 	.word	0xe000e018
 8004f24:	20000000 	.word	0x20000000
 8004f28:	10624dd3 	.word	0x10624dd3
 8004f2c:	e000e014 	.word	0xe000e014

08004f30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004f30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f40 <vPortEnableVFP+0x10>
 8004f34:	6801      	ldr	r1, [r0, #0]
 8004f36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f3a:	6001      	str	r1, [r0, #0]
 8004f3c:	4770      	bx	lr
 8004f3e:	0000      	.short	0x0000
 8004f40:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop

08004f48 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004f54:	f7ff f8c0 	bl	80040d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004f58:	4b63      	ldr	r3, [pc, #396]	; (80050e8 <pvPortMalloc+0x1a0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004f60:	f000 f92e 	bl	80051c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f64:	4b61      	ldr	r3, [pc, #388]	; (80050ec <pvPortMalloc+0x1a4>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f040 80a5 	bne.w	80050bc <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d02c      	beq.n	8004fd2 <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004f78:	2208      	movs	r2, #8
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d226      	bcs.n	8004fd2 <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8004f84:	2208      	movs	r2, #8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4413      	add	r3, r2
 8004f8a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d020      	beq.n	8004fd8 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f023 0307 	bic.w	r3, r3, #7
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d213      	bcs.n	8004fcc <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f023 0307 	bic.w	r3, r3, #7
 8004faa:	3308      	adds	r3, #8
 8004fac:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00f      	beq.n	8004fd8 <pvPortMalloc+0x90>
        __asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	e7fe      	b.n	8004fca <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fd0:	e002      	b.n	8004fd8 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e000      	b.n	8004fda <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fd8:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d06d      	beq.n	80050bc <pvPortMalloc+0x174>
 8004fe0:	4b43      	ldr	r3, [pc, #268]	; (80050f0 <pvPortMalloc+0x1a8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d868      	bhi.n	80050bc <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004fea:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <pvPortMalloc+0x1ac>)
 8004fec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004fee:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <pvPortMalloc+0x1ac>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ff4:	e004      	b.n	8005000 <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d903      	bls.n	8005012 <pvPortMalloc+0xca>
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f1      	bne.n	8004ff6 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005012:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <pvPortMalloc+0x1a0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005018:	429a      	cmp	r2, r3
 800501a:	d04f      	beq.n	80050bc <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2208      	movs	r2, #8
 8005022:	4413      	add	r3, r2
 8005024:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	1ad2      	subs	r2, r2, r3
 8005036:	2308      	movs	r3, #8
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	429a      	cmp	r2, r3
 800503c:	d91e      	bls.n	800507c <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4413      	add	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	2b00      	cmp	r3, #0
 800504e:	d009      	beq.n	8005064 <pvPortMalloc+0x11c>
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	e7fe      	b.n	8005062 <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	1ad2      	subs	r2, r2, r3
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005076:	69b8      	ldr	r0, [r7, #24]
 8005078:	f000 f904 	bl	8005284 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800507c:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <pvPortMalloc+0x1a8>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	4a1a      	ldr	r2, [pc, #104]	; (80050f0 <pvPortMalloc+0x1a8>)
 8005088:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800508a:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <pvPortMalloc+0x1a8>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <pvPortMalloc+0x1b0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d203      	bcs.n	800509e <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005096:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <pvPortMalloc+0x1a8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a17      	ldr	r2, [pc, #92]	; (80050f8 <pvPortMalloc+0x1b0>)
 800509c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <pvPortMalloc+0x1a4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <pvPortMalloc+0x1b4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3301      	adds	r3, #1
 80050b8:	4a10      	ldr	r2, [pc, #64]	; (80050fc <pvPortMalloc+0x1b4>)
 80050ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80050bc:	f7ff f81a 	bl	80040f4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <pvPortMalloc+0x196>
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e7fe      	b.n	80050dc <pvPortMalloc+0x194>
    return pvReturn;
 80050de:	69fb      	ldr	r3, [r7, #28]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3728      	adds	r7, #40	; 0x28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20012dd0 	.word	0x20012dd0
 80050ec:	20012de4 	.word	0x20012de4
 80050f0:	20012dd4 	.word	0x20012dd4
 80050f4:	20012dc8 	.word	0x20012dc8
 80050f8:	20012dd8 	.word	0x20012dd8
 80050fc:	20012ddc 	.word	0x20012ddc

08005100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d04b      	beq.n	80051aa <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005112:	2308      	movs	r3, #8
 8005114:	425b      	negs	r3, r3
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4413      	add	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	4b23      	ldr	r3, [pc, #140]	; (80051b4 <vPortFree+0xb4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4013      	ands	r3, r2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <vPortFree+0x42>
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	e7fe      	b.n	8005140 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <vPortFree+0x5e>
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	60bb      	str	r3, [r7, #8]
 800515c:	e7fe      	b.n	800515c <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <vPortFree+0xb4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01e      	beq.n	80051aa <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11a      	bne.n	80051aa <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <vPortFree+0xb4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	43db      	mvns	r3, r3
 800517e:	401a      	ands	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005184:	f7fe ffa8 	bl	80040d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <vPortFree+0xb8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4413      	add	r3, r2
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <vPortFree+0xb8>)
 8005194:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005196:	6938      	ldr	r0, [r7, #16]
 8005198:	f000 f874 	bl	8005284 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800519c:	4b07      	ldr	r3, [pc, #28]	; (80051bc <vPortFree+0xbc>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4a06      	ldr	r2, [pc, #24]	; (80051bc <vPortFree+0xbc>)
 80051a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80051a6:	f7fe ffa5 	bl	80040f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80051aa:	bf00      	nop
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20012de4 	.word	0x20012de4
 80051b8:	20012dd4 	.word	0x20012dd4
 80051bc:	20012de0 	.word	0x20012de0

080051c0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051c6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80051ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <prvHeapInit+0xac>)
 80051ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3307      	adds	r3, #7
 80051de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0307 	bic.w	r3, r3, #7
 80051e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	4a1f      	ldr	r2, [pc, #124]	; (800526c <prvHeapInit+0xac>)
 80051f0:	4413      	add	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051f8:	4a1d      	ldr	r2, [pc, #116]	; (8005270 <prvHeapInit+0xb0>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80051fe:	4b1c      	ldr	r3, [pc, #112]	; (8005270 <prvHeapInit+0xb0>)
 8005200:	2200      	movs	r2, #0
 8005202:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4413      	add	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800520c:	2208      	movs	r2, #8
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0307 	bic.w	r3, r3, #7
 800521a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a15      	ldr	r2, [pc, #84]	; (8005274 <prvHeapInit+0xb4>)
 8005220:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005222:	4b14      	ldr	r3, [pc, #80]	; (8005274 <prvHeapInit+0xb4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800522a:	4b12      	ldr	r3, [pc, #72]	; (8005274 <prvHeapInit+0xb4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	1ad2      	subs	r2, r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005240:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <prvHeapInit+0xb4>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <prvHeapInit+0xb8>)
 800524e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4a09      	ldr	r2, [pc, #36]	; (800527c <prvHeapInit+0xbc>)
 8005256:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005258:	4b09      	ldr	r3, [pc, #36]	; (8005280 <prvHeapInit+0xc0>)
 800525a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	200001c8 	.word	0x200001c8
 8005270:	20012dc8 	.word	0x20012dc8
 8005274:	20012dd0 	.word	0x20012dd0
 8005278:	20012dd8 	.word	0x20012dd8
 800527c:	20012dd4 	.word	0x20012dd4
 8005280:	20012de4 	.word	0x20012de4

08005284 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800528c:	4b28      	ldr	r3, [pc, #160]	; (8005330 <prvInsertBlockIntoFreeList+0xac>)
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e002      	b.n	8005298 <prvInsertBlockIntoFreeList+0x14>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d8f7      	bhi.n	8005292 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4413      	add	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d108      	bne.n	80052c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	441a      	add	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d118      	bne.n	800530c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b15      	ldr	r3, [pc, #84]	; (8005334 <prvInsertBlockIntoFreeList+0xb0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d00d      	beq.n	8005302 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	441a      	add	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e008      	b.n	8005314 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <prvInsertBlockIntoFreeList+0xb0>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e003      	b.n	8005314 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	d002      	beq.n	8005322 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20012dc8 	.word	0x20012dc8
 8005334:	20012dd0 	.word	0x20012dd0

08005338 <__errno>:
 8005338:	4b01      	ldr	r3, [pc, #4]	; (8005340 <__errno+0x8>)
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000014 	.word	0x20000014

08005344 <__libc_init_array>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	4e0d      	ldr	r6, [pc, #52]	; (800537c <__libc_init_array+0x38>)
 8005348:	4c0d      	ldr	r4, [pc, #52]	; (8005380 <__libc_init_array+0x3c>)
 800534a:	1ba4      	subs	r4, r4, r6
 800534c:	10a4      	asrs	r4, r4, #2
 800534e:	2500      	movs	r5, #0
 8005350:	42a5      	cmp	r5, r4
 8005352:	d109      	bne.n	8005368 <__libc_init_array+0x24>
 8005354:	4e0b      	ldr	r6, [pc, #44]	; (8005384 <__libc_init_array+0x40>)
 8005356:	4c0c      	ldr	r4, [pc, #48]	; (8005388 <__libc_init_array+0x44>)
 8005358:	f000 fc28 	bl	8005bac <_init>
 800535c:	1ba4      	subs	r4, r4, r6
 800535e:	10a4      	asrs	r4, r4, #2
 8005360:	2500      	movs	r5, #0
 8005362:	42a5      	cmp	r5, r4
 8005364:	d105      	bne.n	8005372 <__libc_init_array+0x2e>
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800536c:	4798      	blx	r3
 800536e:	3501      	adds	r5, #1
 8005370:	e7ee      	b.n	8005350 <__libc_init_array+0xc>
 8005372:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005376:	4798      	blx	r3
 8005378:	3501      	adds	r5, #1
 800537a:	e7f2      	b.n	8005362 <__libc_init_array+0x1e>
 800537c:	08005c50 	.word	0x08005c50
 8005380:	08005c50 	.word	0x08005c50
 8005384:	08005c50 	.word	0x08005c50
 8005388:	08005c54 	.word	0x08005c54

0800538c <memcpy>:
 800538c:	b510      	push	{r4, lr}
 800538e:	1e43      	subs	r3, r0, #1
 8005390:	440a      	add	r2, r1
 8005392:	4291      	cmp	r1, r2
 8005394:	d100      	bne.n	8005398 <memcpy+0xc>
 8005396:	bd10      	pop	{r4, pc}
 8005398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800539c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053a0:	e7f7      	b.n	8005392 <memcpy+0x6>

080053a2 <memset>:
 80053a2:	4402      	add	r2, r0
 80053a4:	4603      	mov	r3, r0
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d100      	bne.n	80053ac <memset+0xa>
 80053aa:	4770      	bx	lr
 80053ac:	f803 1b01 	strb.w	r1, [r3], #1
 80053b0:	e7f9      	b.n	80053a6 <memset+0x4>
	...

080053b4 <siprintf>:
 80053b4:	b40e      	push	{r1, r2, r3}
 80053b6:	b500      	push	{lr}
 80053b8:	b09c      	sub	sp, #112	; 0x70
 80053ba:	ab1d      	add	r3, sp, #116	; 0x74
 80053bc:	9002      	str	r0, [sp, #8]
 80053be:	9006      	str	r0, [sp, #24]
 80053c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053c4:	4809      	ldr	r0, [pc, #36]	; (80053ec <siprintf+0x38>)
 80053c6:	9107      	str	r1, [sp, #28]
 80053c8:	9104      	str	r1, [sp, #16]
 80053ca:	4909      	ldr	r1, [pc, #36]	; (80053f0 <siprintf+0x3c>)
 80053cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80053d0:	9105      	str	r1, [sp, #20]
 80053d2:	6800      	ldr	r0, [r0, #0]
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	a902      	add	r1, sp, #8
 80053d8:	f000 f866 	bl	80054a8 <_svfiprintf_r>
 80053dc:	9b02      	ldr	r3, [sp, #8]
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	b01c      	add	sp, #112	; 0x70
 80053e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053e8:	b003      	add	sp, #12
 80053ea:	4770      	bx	lr
 80053ec:	20000014 	.word	0x20000014
 80053f0:	ffff0208 	.word	0xffff0208

080053f4 <__ssputs_r>:
 80053f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f8:	688e      	ldr	r6, [r1, #8]
 80053fa:	429e      	cmp	r6, r3
 80053fc:	4682      	mov	sl, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	4690      	mov	r8, r2
 8005402:	4699      	mov	r9, r3
 8005404:	d837      	bhi.n	8005476 <__ssputs_r+0x82>
 8005406:	898a      	ldrh	r2, [r1, #12]
 8005408:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800540c:	d031      	beq.n	8005472 <__ssputs_r+0x7e>
 800540e:	6825      	ldr	r5, [r4, #0]
 8005410:	6909      	ldr	r1, [r1, #16]
 8005412:	1a6f      	subs	r7, r5, r1
 8005414:	6965      	ldr	r5, [r4, #20]
 8005416:	2302      	movs	r3, #2
 8005418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800541c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005420:	f109 0301 	add.w	r3, r9, #1
 8005424:	443b      	add	r3, r7
 8005426:	429d      	cmp	r5, r3
 8005428:	bf38      	it	cc
 800542a:	461d      	movcc	r5, r3
 800542c:	0553      	lsls	r3, r2, #21
 800542e:	d530      	bpl.n	8005492 <__ssputs_r+0x9e>
 8005430:	4629      	mov	r1, r5
 8005432:	f000 fb21 	bl	8005a78 <_malloc_r>
 8005436:	4606      	mov	r6, r0
 8005438:	b950      	cbnz	r0, 8005450 <__ssputs_r+0x5c>
 800543a:	230c      	movs	r3, #12
 800543c:	f8ca 3000 	str.w	r3, [sl]
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005446:	81a3      	strh	r3, [r4, #12]
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005450:	463a      	mov	r2, r7
 8005452:	6921      	ldr	r1, [r4, #16]
 8005454:	f7ff ff9a 	bl	800538c <memcpy>
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	81a3      	strh	r3, [r4, #12]
 8005464:	6126      	str	r6, [r4, #16]
 8005466:	6165      	str	r5, [r4, #20]
 8005468:	443e      	add	r6, r7
 800546a:	1bed      	subs	r5, r5, r7
 800546c:	6026      	str	r6, [r4, #0]
 800546e:	60a5      	str	r5, [r4, #8]
 8005470:	464e      	mov	r6, r9
 8005472:	454e      	cmp	r6, r9
 8005474:	d900      	bls.n	8005478 <__ssputs_r+0x84>
 8005476:	464e      	mov	r6, r9
 8005478:	4632      	mov	r2, r6
 800547a:	4641      	mov	r1, r8
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	f000 fa93 	bl	80059a8 <memmove>
 8005482:	68a3      	ldr	r3, [r4, #8]
 8005484:	1b9b      	subs	r3, r3, r6
 8005486:	60a3      	str	r3, [r4, #8]
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	441e      	add	r6, r3
 800548c:	6026      	str	r6, [r4, #0]
 800548e:	2000      	movs	r0, #0
 8005490:	e7dc      	b.n	800544c <__ssputs_r+0x58>
 8005492:	462a      	mov	r2, r5
 8005494:	f000 fb4a 	bl	8005b2c <_realloc_r>
 8005498:	4606      	mov	r6, r0
 800549a:	2800      	cmp	r0, #0
 800549c:	d1e2      	bne.n	8005464 <__ssputs_r+0x70>
 800549e:	6921      	ldr	r1, [r4, #16]
 80054a0:	4650      	mov	r0, sl
 80054a2:	f000 fa9b 	bl	80059dc <_free_r>
 80054a6:	e7c8      	b.n	800543a <__ssputs_r+0x46>

080054a8 <_svfiprintf_r>:
 80054a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	461d      	mov	r5, r3
 80054ae:	898b      	ldrh	r3, [r1, #12]
 80054b0:	061f      	lsls	r7, r3, #24
 80054b2:	b09d      	sub	sp, #116	; 0x74
 80054b4:	4680      	mov	r8, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	4616      	mov	r6, r2
 80054ba:	d50f      	bpl.n	80054dc <_svfiprintf_r+0x34>
 80054bc:	690b      	ldr	r3, [r1, #16]
 80054be:	b96b      	cbnz	r3, 80054dc <_svfiprintf_r+0x34>
 80054c0:	2140      	movs	r1, #64	; 0x40
 80054c2:	f000 fad9 	bl	8005a78 <_malloc_r>
 80054c6:	6020      	str	r0, [r4, #0]
 80054c8:	6120      	str	r0, [r4, #16]
 80054ca:	b928      	cbnz	r0, 80054d8 <_svfiprintf_r+0x30>
 80054cc:	230c      	movs	r3, #12
 80054ce:	f8c8 3000 	str.w	r3, [r8]
 80054d2:	f04f 30ff 	mov.w	r0, #4294967295
 80054d6:	e0c8      	b.n	800566a <_svfiprintf_r+0x1c2>
 80054d8:	2340      	movs	r3, #64	; 0x40
 80054da:	6163      	str	r3, [r4, #20]
 80054dc:	2300      	movs	r3, #0
 80054de:	9309      	str	r3, [sp, #36]	; 0x24
 80054e0:	2320      	movs	r3, #32
 80054e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054e6:	2330      	movs	r3, #48	; 0x30
 80054e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054ec:	9503      	str	r5, [sp, #12]
 80054ee:	f04f 0b01 	mov.w	fp, #1
 80054f2:	4637      	mov	r7, r6
 80054f4:	463d      	mov	r5, r7
 80054f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80054fa:	b10b      	cbz	r3, 8005500 <_svfiprintf_r+0x58>
 80054fc:	2b25      	cmp	r3, #37	; 0x25
 80054fe:	d13e      	bne.n	800557e <_svfiprintf_r+0xd6>
 8005500:	ebb7 0a06 	subs.w	sl, r7, r6
 8005504:	d00b      	beq.n	800551e <_svfiprintf_r+0x76>
 8005506:	4653      	mov	r3, sl
 8005508:	4632      	mov	r2, r6
 800550a:	4621      	mov	r1, r4
 800550c:	4640      	mov	r0, r8
 800550e:	f7ff ff71 	bl	80053f4 <__ssputs_r>
 8005512:	3001      	adds	r0, #1
 8005514:	f000 80a4 	beq.w	8005660 <_svfiprintf_r+0x1b8>
 8005518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800551a:	4453      	add	r3, sl
 800551c:	9309      	str	r3, [sp, #36]	; 0x24
 800551e:	783b      	ldrb	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 809d 	beq.w	8005660 <_svfiprintf_r+0x1b8>
 8005526:	2300      	movs	r3, #0
 8005528:	f04f 32ff 	mov.w	r2, #4294967295
 800552c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005530:	9304      	str	r3, [sp, #16]
 8005532:	9307      	str	r3, [sp, #28]
 8005534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005538:	931a      	str	r3, [sp, #104]	; 0x68
 800553a:	462f      	mov	r7, r5
 800553c:	2205      	movs	r2, #5
 800553e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005542:	4850      	ldr	r0, [pc, #320]	; (8005684 <_svfiprintf_r+0x1dc>)
 8005544:	f7fa fe5c 	bl	8000200 <memchr>
 8005548:	9b04      	ldr	r3, [sp, #16]
 800554a:	b9d0      	cbnz	r0, 8005582 <_svfiprintf_r+0xda>
 800554c:	06d9      	lsls	r1, r3, #27
 800554e:	bf44      	itt	mi
 8005550:	2220      	movmi	r2, #32
 8005552:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005556:	071a      	lsls	r2, r3, #28
 8005558:	bf44      	itt	mi
 800555a:	222b      	movmi	r2, #43	; 0x2b
 800555c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005560:	782a      	ldrb	r2, [r5, #0]
 8005562:	2a2a      	cmp	r2, #42	; 0x2a
 8005564:	d015      	beq.n	8005592 <_svfiprintf_r+0xea>
 8005566:	9a07      	ldr	r2, [sp, #28]
 8005568:	462f      	mov	r7, r5
 800556a:	2000      	movs	r0, #0
 800556c:	250a      	movs	r5, #10
 800556e:	4639      	mov	r1, r7
 8005570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005574:	3b30      	subs	r3, #48	; 0x30
 8005576:	2b09      	cmp	r3, #9
 8005578:	d94d      	bls.n	8005616 <_svfiprintf_r+0x16e>
 800557a:	b1b8      	cbz	r0, 80055ac <_svfiprintf_r+0x104>
 800557c:	e00f      	b.n	800559e <_svfiprintf_r+0xf6>
 800557e:	462f      	mov	r7, r5
 8005580:	e7b8      	b.n	80054f4 <_svfiprintf_r+0x4c>
 8005582:	4a40      	ldr	r2, [pc, #256]	; (8005684 <_svfiprintf_r+0x1dc>)
 8005584:	1a80      	subs	r0, r0, r2
 8005586:	fa0b f000 	lsl.w	r0, fp, r0
 800558a:	4318      	orrs	r0, r3
 800558c:	9004      	str	r0, [sp, #16]
 800558e:	463d      	mov	r5, r7
 8005590:	e7d3      	b.n	800553a <_svfiprintf_r+0x92>
 8005592:	9a03      	ldr	r2, [sp, #12]
 8005594:	1d11      	adds	r1, r2, #4
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	9103      	str	r1, [sp, #12]
 800559a:	2a00      	cmp	r2, #0
 800559c:	db01      	blt.n	80055a2 <_svfiprintf_r+0xfa>
 800559e:	9207      	str	r2, [sp, #28]
 80055a0:	e004      	b.n	80055ac <_svfiprintf_r+0x104>
 80055a2:	4252      	negs	r2, r2
 80055a4:	f043 0302 	orr.w	r3, r3, #2
 80055a8:	9207      	str	r2, [sp, #28]
 80055aa:	9304      	str	r3, [sp, #16]
 80055ac:	783b      	ldrb	r3, [r7, #0]
 80055ae:	2b2e      	cmp	r3, #46	; 0x2e
 80055b0:	d10c      	bne.n	80055cc <_svfiprintf_r+0x124>
 80055b2:	787b      	ldrb	r3, [r7, #1]
 80055b4:	2b2a      	cmp	r3, #42	; 0x2a
 80055b6:	d133      	bne.n	8005620 <_svfiprintf_r+0x178>
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	1d1a      	adds	r2, r3, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	9203      	str	r2, [sp, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bfb8      	it	lt
 80055c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80055c8:	3702      	adds	r7, #2
 80055ca:	9305      	str	r3, [sp, #20]
 80055cc:	4d2e      	ldr	r5, [pc, #184]	; (8005688 <_svfiprintf_r+0x1e0>)
 80055ce:	7839      	ldrb	r1, [r7, #0]
 80055d0:	2203      	movs	r2, #3
 80055d2:	4628      	mov	r0, r5
 80055d4:	f7fa fe14 	bl	8000200 <memchr>
 80055d8:	b138      	cbz	r0, 80055ea <_svfiprintf_r+0x142>
 80055da:	2340      	movs	r3, #64	; 0x40
 80055dc:	1b40      	subs	r0, r0, r5
 80055de:	fa03 f000 	lsl.w	r0, r3, r0
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	4303      	orrs	r3, r0
 80055e6:	3701      	adds	r7, #1
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	7839      	ldrb	r1, [r7, #0]
 80055ec:	4827      	ldr	r0, [pc, #156]	; (800568c <_svfiprintf_r+0x1e4>)
 80055ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055f2:	2206      	movs	r2, #6
 80055f4:	1c7e      	adds	r6, r7, #1
 80055f6:	f7fa fe03 	bl	8000200 <memchr>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d038      	beq.n	8005670 <_svfiprintf_r+0x1c8>
 80055fe:	4b24      	ldr	r3, [pc, #144]	; (8005690 <_svfiprintf_r+0x1e8>)
 8005600:	bb13      	cbnz	r3, 8005648 <_svfiprintf_r+0x1a0>
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	3307      	adds	r3, #7
 8005606:	f023 0307 	bic.w	r3, r3, #7
 800560a:	3308      	adds	r3, #8
 800560c:	9303      	str	r3, [sp, #12]
 800560e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005610:	444b      	add	r3, r9
 8005612:	9309      	str	r3, [sp, #36]	; 0x24
 8005614:	e76d      	b.n	80054f2 <_svfiprintf_r+0x4a>
 8005616:	fb05 3202 	mla	r2, r5, r2, r3
 800561a:	2001      	movs	r0, #1
 800561c:	460f      	mov	r7, r1
 800561e:	e7a6      	b.n	800556e <_svfiprintf_r+0xc6>
 8005620:	2300      	movs	r3, #0
 8005622:	3701      	adds	r7, #1
 8005624:	9305      	str	r3, [sp, #20]
 8005626:	4619      	mov	r1, r3
 8005628:	250a      	movs	r5, #10
 800562a:	4638      	mov	r0, r7
 800562c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005630:	3a30      	subs	r2, #48	; 0x30
 8005632:	2a09      	cmp	r2, #9
 8005634:	d903      	bls.n	800563e <_svfiprintf_r+0x196>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0c8      	beq.n	80055cc <_svfiprintf_r+0x124>
 800563a:	9105      	str	r1, [sp, #20]
 800563c:	e7c6      	b.n	80055cc <_svfiprintf_r+0x124>
 800563e:	fb05 2101 	mla	r1, r5, r1, r2
 8005642:	2301      	movs	r3, #1
 8005644:	4607      	mov	r7, r0
 8005646:	e7f0      	b.n	800562a <_svfiprintf_r+0x182>
 8005648:	ab03      	add	r3, sp, #12
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	4622      	mov	r2, r4
 800564e:	4b11      	ldr	r3, [pc, #68]	; (8005694 <_svfiprintf_r+0x1ec>)
 8005650:	a904      	add	r1, sp, #16
 8005652:	4640      	mov	r0, r8
 8005654:	f3af 8000 	nop.w
 8005658:	f1b0 3fff 	cmp.w	r0, #4294967295
 800565c:	4681      	mov	r9, r0
 800565e:	d1d6      	bne.n	800560e <_svfiprintf_r+0x166>
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	065b      	lsls	r3, r3, #25
 8005664:	f53f af35 	bmi.w	80054d2 <_svfiprintf_r+0x2a>
 8005668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800566a:	b01d      	add	sp, #116	; 0x74
 800566c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005670:	ab03      	add	r3, sp, #12
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	4622      	mov	r2, r4
 8005676:	4b07      	ldr	r3, [pc, #28]	; (8005694 <_svfiprintf_r+0x1ec>)
 8005678:	a904      	add	r1, sp, #16
 800567a:	4640      	mov	r0, r8
 800567c:	f000 f882 	bl	8005784 <_printf_i>
 8005680:	e7ea      	b.n	8005658 <_svfiprintf_r+0x1b0>
 8005682:	bf00      	nop
 8005684:	08005c14 	.word	0x08005c14
 8005688:	08005c1a 	.word	0x08005c1a
 800568c:	08005c1e 	.word	0x08005c1e
 8005690:	00000000 	.word	0x00000000
 8005694:	080053f5 	.word	0x080053f5

08005698 <_printf_common>:
 8005698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	4691      	mov	r9, r2
 800569e:	461f      	mov	r7, r3
 80056a0:	688a      	ldr	r2, [r1, #8]
 80056a2:	690b      	ldr	r3, [r1, #16]
 80056a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a8:	4293      	cmp	r3, r2
 80056aa:	bfb8      	it	lt
 80056ac:	4613      	movlt	r3, r2
 80056ae:	f8c9 3000 	str.w	r3, [r9]
 80056b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056b6:	4606      	mov	r6, r0
 80056b8:	460c      	mov	r4, r1
 80056ba:	b112      	cbz	r2, 80056c2 <_printf_common+0x2a>
 80056bc:	3301      	adds	r3, #1
 80056be:	f8c9 3000 	str.w	r3, [r9]
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	0699      	lsls	r1, r3, #26
 80056c6:	bf42      	ittt	mi
 80056c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80056cc:	3302      	addmi	r3, #2
 80056ce:	f8c9 3000 	strmi.w	r3, [r9]
 80056d2:	6825      	ldr	r5, [r4, #0]
 80056d4:	f015 0506 	ands.w	r5, r5, #6
 80056d8:	d107      	bne.n	80056ea <_printf_common+0x52>
 80056da:	f104 0a19 	add.w	sl, r4, #25
 80056de:	68e3      	ldr	r3, [r4, #12]
 80056e0:	f8d9 2000 	ldr.w	r2, [r9]
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	42ab      	cmp	r3, r5
 80056e8:	dc28      	bgt.n	800573c <_printf_common+0xa4>
 80056ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80056ee:	6822      	ldr	r2, [r4, #0]
 80056f0:	3300      	adds	r3, #0
 80056f2:	bf18      	it	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	0692      	lsls	r2, r2, #26
 80056f8:	d42d      	bmi.n	8005756 <_printf_common+0xbe>
 80056fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056fe:	4639      	mov	r1, r7
 8005700:	4630      	mov	r0, r6
 8005702:	47c0      	blx	r8
 8005704:	3001      	adds	r0, #1
 8005706:	d020      	beq.n	800574a <_printf_common+0xb2>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	68e5      	ldr	r5, [r4, #12]
 800570c:	f8d9 2000 	ldr.w	r2, [r9]
 8005710:	f003 0306 	and.w	r3, r3, #6
 8005714:	2b04      	cmp	r3, #4
 8005716:	bf08      	it	eq
 8005718:	1aad      	subeq	r5, r5, r2
 800571a:	68a3      	ldr	r3, [r4, #8]
 800571c:	6922      	ldr	r2, [r4, #16]
 800571e:	bf0c      	ite	eq
 8005720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005724:	2500      	movne	r5, #0
 8005726:	4293      	cmp	r3, r2
 8005728:	bfc4      	itt	gt
 800572a:	1a9b      	subgt	r3, r3, r2
 800572c:	18ed      	addgt	r5, r5, r3
 800572e:	f04f 0900 	mov.w	r9, #0
 8005732:	341a      	adds	r4, #26
 8005734:	454d      	cmp	r5, r9
 8005736:	d11a      	bne.n	800576e <_printf_common+0xd6>
 8005738:	2000      	movs	r0, #0
 800573a:	e008      	b.n	800574e <_printf_common+0xb6>
 800573c:	2301      	movs	r3, #1
 800573e:	4652      	mov	r2, sl
 8005740:	4639      	mov	r1, r7
 8005742:	4630      	mov	r0, r6
 8005744:	47c0      	blx	r8
 8005746:	3001      	adds	r0, #1
 8005748:	d103      	bne.n	8005752 <_printf_common+0xba>
 800574a:	f04f 30ff 	mov.w	r0, #4294967295
 800574e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005752:	3501      	adds	r5, #1
 8005754:	e7c3      	b.n	80056de <_printf_common+0x46>
 8005756:	18e1      	adds	r1, r4, r3
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	2030      	movs	r0, #48	; 0x30
 800575c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005760:	4422      	add	r2, r4
 8005762:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005766:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800576a:	3302      	adds	r3, #2
 800576c:	e7c5      	b.n	80056fa <_printf_common+0x62>
 800576e:	2301      	movs	r3, #1
 8005770:	4622      	mov	r2, r4
 8005772:	4639      	mov	r1, r7
 8005774:	4630      	mov	r0, r6
 8005776:	47c0      	blx	r8
 8005778:	3001      	adds	r0, #1
 800577a:	d0e6      	beq.n	800574a <_printf_common+0xb2>
 800577c:	f109 0901 	add.w	r9, r9, #1
 8005780:	e7d8      	b.n	8005734 <_printf_common+0x9c>
	...

08005784 <_printf_i>:
 8005784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005788:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800578c:	460c      	mov	r4, r1
 800578e:	7e09      	ldrb	r1, [r1, #24]
 8005790:	b085      	sub	sp, #20
 8005792:	296e      	cmp	r1, #110	; 0x6e
 8005794:	4617      	mov	r7, r2
 8005796:	4606      	mov	r6, r0
 8005798:	4698      	mov	r8, r3
 800579a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800579c:	f000 80b3 	beq.w	8005906 <_printf_i+0x182>
 80057a0:	d822      	bhi.n	80057e8 <_printf_i+0x64>
 80057a2:	2963      	cmp	r1, #99	; 0x63
 80057a4:	d036      	beq.n	8005814 <_printf_i+0x90>
 80057a6:	d80a      	bhi.n	80057be <_printf_i+0x3a>
 80057a8:	2900      	cmp	r1, #0
 80057aa:	f000 80b9 	beq.w	8005920 <_printf_i+0x19c>
 80057ae:	2958      	cmp	r1, #88	; 0x58
 80057b0:	f000 8083 	beq.w	80058ba <_printf_i+0x136>
 80057b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80057bc:	e032      	b.n	8005824 <_printf_i+0xa0>
 80057be:	2964      	cmp	r1, #100	; 0x64
 80057c0:	d001      	beq.n	80057c6 <_printf_i+0x42>
 80057c2:	2969      	cmp	r1, #105	; 0x69
 80057c4:	d1f6      	bne.n	80057b4 <_printf_i+0x30>
 80057c6:	6820      	ldr	r0, [r4, #0]
 80057c8:	6813      	ldr	r3, [r2, #0]
 80057ca:	0605      	lsls	r5, r0, #24
 80057cc:	f103 0104 	add.w	r1, r3, #4
 80057d0:	d52a      	bpl.n	8005828 <_printf_i+0xa4>
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	da03      	bge.n	80057e2 <_printf_i+0x5e>
 80057da:	222d      	movs	r2, #45	; 0x2d
 80057dc:	425b      	negs	r3, r3
 80057de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80057e2:	486f      	ldr	r0, [pc, #444]	; (80059a0 <_printf_i+0x21c>)
 80057e4:	220a      	movs	r2, #10
 80057e6:	e039      	b.n	800585c <_printf_i+0xd8>
 80057e8:	2973      	cmp	r1, #115	; 0x73
 80057ea:	f000 809d 	beq.w	8005928 <_printf_i+0x1a4>
 80057ee:	d808      	bhi.n	8005802 <_printf_i+0x7e>
 80057f0:	296f      	cmp	r1, #111	; 0x6f
 80057f2:	d020      	beq.n	8005836 <_printf_i+0xb2>
 80057f4:	2970      	cmp	r1, #112	; 0x70
 80057f6:	d1dd      	bne.n	80057b4 <_printf_i+0x30>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	f043 0320 	orr.w	r3, r3, #32
 80057fe:	6023      	str	r3, [r4, #0]
 8005800:	e003      	b.n	800580a <_printf_i+0x86>
 8005802:	2975      	cmp	r1, #117	; 0x75
 8005804:	d017      	beq.n	8005836 <_printf_i+0xb2>
 8005806:	2978      	cmp	r1, #120	; 0x78
 8005808:	d1d4      	bne.n	80057b4 <_printf_i+0x30>
 800580a:	2378      	movs	r3, #120	; 0x78
 800580c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005810:	4864      	ldr	r0, [pc, #400]	; (80059a4 <_printf_i+0x220>)
 8005812:	e055      	b.n	80058c0 <_printf_i+0x13c>
 8005814:	6813      	ldr	r3, [r2, #0]
 8005816:	1d19      	adds	r1, r3, #4
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6011      	str	r1, [r2, #0]
 800581c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005824:	2301      	movs	r3, #1
 8005826:	e08c      	b.n	8005942 <_printf_i+0x1be>
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6011      	str	r1, [r2, #0]
 800582c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005830:	bf18      	it	ne
 8005832:	b21b      	sxthne	r3, r3
 8005834:	e7cf      	b.n	80057d6 <_printf_i+0x52>
 8005836:	6813      	ldr	r3, [r2, #0]
 8005838:	6825      	ldr	r5, [r4, #0]
 800583a:	1d18      	adds	r0, r3, #4
 800583c:	6010      	str	r0, [r2, #0]
 800583e:	0628      	lsls	r0, r5, #24
 8005840:	d501      	bpl.n	8005846 <_printf_i+0xc2>
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	e002      	b.n	800584c <_printf_i+0xc8>
 8005846:	0668      	lsls	r0, r5, #25
 8005848:	d5fb      	bpl.n	8005842 <_printf_i+0xbe>
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	4854      	ldr	r0, [pc, #336]	; (80059a0 <_printf_i+0x21c>)
 800584e:	296f      	cmp	r1, #111	; 0x6f
 8005850:	bf14      	ite	ne
 8005852:	220a      	movne	r2, #10
 8005854:	2208      	moveq	r2, #8
 8005856:	2100      	movs	r1, #0
 8005858:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800585c:	6865      	ldr	r5, [r4, #4]
 800585e:	60a5      	str	r5, [r4, #8]
 8005860:	2d00      	cmp	r5, #0
 8005862:	f2c0 8095 	blt.w	8005990 <_printf_i+0x20c>
 8005866:	6821      	ldr	r1, [r4, #0]
 8005868:	f021 0104 	bic.w	r1, r1, #4
 800586c:	6021      	str	r1, [r4, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d13d      	bne.n	80058ee <_printf_i+0x16a>
 8005872:	2d00      	cmp	r5, #0
 8005874:	f040 808e 	bne.w	8005994 <_printf_i+0x210>
 8005878:	4665      	mov	r5, ip
 800587a:	2a08      	cmp	r2, #8
 800587c:	d10b      	bne.n	8005896 <_printf_i+0x112>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	07db      	lsls	r3, r3, #31
 8005882:	d508      	bpl.n	8005896 <_printf_i+0x112>
 8005884:	6923      	ldr	r3, [r4, #16]
 8005886:	6862      	ldr	r2, [r4, #4]
 8005888:	429a      	cmp	r2, r3
 800588a:	bfde      	ittt	le
 800588c:	2330      	movle	r3, #48	; 0x30
 800588e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005892:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005896:	ebac 0305 	sub.w	r3, ip, r5
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	f8cd 8000 	str.w	r8, [sp]
 80058a0:	463b      	mov	r3, r7
 80058a2:	aa03      	add	r2, sp, #12
 80058a4:	4621      	mov	r1, r4
 80058a6:	4630      	mov	r0, r6
 80058a8:	f7ff fef6 	bl	8005698 <_printf_common>
 80058ac:	3001      	adds	r0, #1
 80058ae:	d14d      	bne.n	800594c <_printf_i+0x1c8>
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	b005      	add	sp, #20
 80058b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058ba:	4839      	ldr	r0, [pc, #228]	; (80059a0 <_printf_i+0x21c>)
 80058bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80058c0:	6813      	ldr	r3, [r2, #0]
 80058c2:	6821      	ldr	r1, [r4, #0]
 80058c4:	1d1d      	adds	r5, r3, #4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6015      	str	r5, [r2, #0]
 80058ca:	060a      	lsls	r2, r1, #24
 80058cc:	d50b      	bpl.n	80058e6 <_printf_i+0x162>
 80058ce:	07ca      	lsls	r2, r1, #31
 80058d0:	bf44      	itt	mi
 80058d2:	f041 0120 	orrmi.w	r1, r1, #32
 80058d6:	6021      	strmi	r1, [r4, #0]
 80058d8:	b91b      	cbnz	r3, 80058e2 <_printf_i+0x15e>
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	f022 0220 	bic.w	r2, r2, #32
 80058e0:	6022      	str	r2, [r4, #0]
 80058e2:	2210      	movs	r2, #16
 80058e4:	e7b7      	b.n	8005856 <_printf_i+0xd2>
 80058e6:	064d      	lsls	r5, r1, #25
 80058e8:	bf48      	it	mi
 80058ea:	b29b      	uxthmi	r3, r3
 80058ec:	e7ef      	b.n	80058ce <_printf_i+0x14a>
 80058ee:	4665      	mov	r5, ip
 80058f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80058f4:	fb02 3311 	mls	r3, r2, r1, r3
 80058f8:	5cc3      	ldrb	r3, [r0, r3]
 80058fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80058fe:	460b      	mov	r3, r1
 8005900:	2900      	cmp	r1, #0
 8005902:	d1f5      	bne.n	80058f0 <_printf_i+0x16c>
 8005904:	e7b9      	b.n	800587a <_printf_i+0xf6>
 8005906:	6813      	ldr	r3, [r2, #0]
 8005908:	6825      	ldr	r5, [r4, #0]
 800590a:	6961      	ldr	r1, [r4, #20]
 800590c:	1d18      	adds	r0, r3, #4
 800590e:	6010      	str	r0, [r2, #0]
 8005910:	0628      	lsls	r0, r5, #24
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	d501      	bpl.n	800591a <_printf_i+0x196>
 8005916:	6019      	str	r1, [r3, #0]
 8005918:	e002      	b.n	8005920 <_printf_i+0x19c>
 800591a:	066a      	lsls	r2, r5, #25
 800591c:	d5fb      	bpl.n	8005916 <_printf_i+0x192>
 800591e:	8019      	strh	r1, [r3, #0]
 8005920:	2300      	movs	r3, #0
 8005922:	6123      	str	r3, [r4, #16]
 8005924:	4665      	mov	r5, ip
 8005926:	e7b9      	b.n	800589c <_printf_i+0x118>
 8005928:	6813      	ldr	r3, [r2, #0]
 800592a:	1d19      	adds	r1, r3, #4
 800592c:	6011      	str	r1, [r2, #0]
 800592e:	681d      	ldr	r5, [r3, #0]
 8005930:	6862      	ldr	r2, [r4, #4]
 8005932:	2100      	movs	r1, #0
 8005934:	4628      	mov	r0, r5
 8005936:	f7fa fc63 	bl	8000200 <memchr>
 800593a:	b108      	cbz	r0, 8005940 <_printf_i+0x1bc>
 800593c:	1b40      	subs	r0, r0, r5
 800593e:	6060      	str	r0, [r4, #4]
 8005940:	6863      	ldr	r3, [r4, #4]
 8005942:	6123      	str	r3, [r4, #16]
 8005944:	2300      	movs	r3, #0
 8005946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800594a:	e7a7      	b.n	800589c <_printf_i+0x118>
 800594c:	6923      	ldr	r3, [r4, #16]
 800594e:	462a      	mov	r2, r5
 8005950:	4639      	mov	r1, r7
 8005952:	4630      	mov	r0, r6
 8005954:	47c0      	blx	r8
 8005956:	3001      	adds	r0, #1
 8005958:	d0aa      	beq.n	80058b0 <_printf_i+0x12c>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	079b      	lsls	r3, r3, #30
 800595e:	d413      	bmi.n	8005988 <_printf_i+0x204>
 8005960:	68e0      	ldr	r0, [r4, #12]
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	4298      	cmp	r0, r3
 8005966:	bfb8      	it	lt
 8005968:	4618      	movlt	r0, r3
 800596a:	e7a3      	b.n	80058b4 <_printf_i+0x130>
 800596c:	2301      	movs	r3, #1
 800596e:	464a      	mov	r2, r9
 8005970:	4639      	mov	r1, r7
 8005972:	4630      	mov	r0, r6
 8005974:	47c0      	blx	r8
 8005976:	3001      	adds	r0, #1
 8005978:	d09a      	beq.n	80058b0 <_printf_i+0x12c>
 800597a:	3501      	adds	r5, #1
 800597c:	68e3      	ldr	r3, [r4, #12]
 800597e:	9a03      	ldr	r2, [sp, #12]
 8005980:	1a9b      	subs	r3, r3, r2
 8005982:	42ab      	cmp	r3, r5
 8005984:	dcf2      	bgt.n	800596c <_printf_i+0x1e8>
 8005986:	e7eb      	b.n	8005960 <_printf_i+0x1dc>
 8005988:	2500      	movs	r5, #0
 800598a:	f104 0919 	add.w	r9, r4, #25
 800598e:	e7f5      	b.n	800597c <_printf_i+0x1f8>
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1ac      	bne.n	80058ee <_printf_i+0x16a>
 8005994:	7803      	ldrb	r3, [r0, #0]
 8005996:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800599a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800599e:	e76c      	b.n	800587a <_printf_i+0xf6>
 80059a0:	08005c25 	.word	0x08005c25
 80059a4:	08005c36 	.word	0x08005c36

080059a8 <memmove>:
 80059a8:	4288      	cmp	r0, r1
 80059aa:	b510      	push	{r4, lr}
 80059ac:	eb01 0302 	add.w	r3, r1, r2
 80059b0:	d807      	bhi.n	80059c2 <memmove+0x1a>
 80059b2:	1e42      	subs	r2, r0, #1
 80059b4:	4299      	cmp	r1, r3
 80059b6:	d00a      	beq.n	80059ce <memmove+0x26>
 80059b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80059c0:	e7f8      	b.n	80059b4 <memmove+0xc>
 80059c2:	4283      	cmp	r3, r0
 80059c4:	d9f5      	bls.n	80059b2 <memmove+0xa>
 80059c6:	1881      	adds	r1, r0, r2
 80059c8:	1ad2      	subs	r2, r2, r3
 80059ca:	42d3      	cmn	r3, r2
 80059cc:	d100      	bne.n	80059d0 <memmove+0x28>
 80059ce:	bd10      	pop	{r4, pc}
 80059d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80059d8:	e7f7      	b.n	80059ca <memmove+0x22>
	...

080059dc <_free_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4605      	mov	r5, r0
 80059e0:	2900      	cmp	r1, #0
 80059e2:	d045      	beq.n	8005a70 <_free_r+0x94>
 80059e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e8:	1f0c      	subs	r4, r1, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bfb8      	it	lt
 80059ee:	18e4      	addlt	r4, r4, r3
 80059f0:	f000 f8d2 	bl	8005b98 <__malloc_lock>
 80059f4:	4a1f      	ldr	r2, [pc, #124]	; (8005a74 <_free_r+0x98>)
 80059f6:	6813      	ldr	r3, [r2, #0]
 80059f8:	4610      	mov	r0, r2
 80059fa:	b933      	cbnz	r3, 8005a0a <_free_r+0x2e>
 80059fc:	6063      	str	r3, [r4, #4]
 80059fe:	6014      	str	r4, [r2, #0]
 8005a00:	4628      	mov	r0, r5
 8005a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a06:	f000 b8c8 	b.w	8005b9a <__malloc_unlock>
 8005a0a:	42a3      	cmp	r3, r4
 8005a0c:	d90c      	bls.n	8005a28 <_free_r+0x4c>
 8005a0e:	6821      	ldr	r1, [r4, #0]
 8005a10:	1862      	adds	r2, r4, r1
 8005a12:	4293      	cmp	r3, r2
 8005a14:	bf04      	itt	eq
 8005a16:	681a      	ldreq	r2, [r3, #0]
 8005a18:	685b      	ldreq	r3, [r3, #4]
 8005a1a:	6063      	str	r3, [r4, #4]
 8005a1c:	bf04      	itt	eq
 8005a1e:	1852      	addeq	r2, r2, r1
 8005a20:	6022      	streq	r2, [r4, #0]
 8005a22:	6004      	str	r4, [r0, #0]
 8005a24:	e7ec      	b.n	8005a00 <_free_r+0x24>
 8005a26:	4613      	mov	r3, r2
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	b10a      	cbz	r2, 8005a30 <_free_r+0x54>
 8005a2c:	42a2      	cmp	r2, r4
 8005a2e:	d9fa      	bls.n	8005a26 <_free_r+0x4a>
 8005a30:	6819      	ldr	r1, [r3, #0]
 8005a32:	1858      	adds	r0, r3, r1
 8005a34:	42a0      	cmp	r0, r4
 8005a36:	d10b      	bne.n	8005a50 <_free_r+0x74>
 8005a38:	6820      	ldr	r0, [r4, #0]
 8005a3a:	4401      	add	r1, r0
 8005a3c:	1858      	adds	r0, r3, r1
 8005a3e:	4282      	cmp	r2, r0
 8005a40:	6019      	str	r1, [r3, #0]
 8005a42:	d1dd      	bne.n	8005a00 <_free_r+0x24>
 8005a44:	6810      	ldr	r0, [r2, #0]
 8005a46:	6852      	ldr	r2, [r2, #4]
 8005a48:	605a      	str	r2, [r3, #4]
 8005a4a:	4401      	add	r1, r0
 8005a4c:	6019      	str	r1, [r3, #0]
 8005a4e:	e7d7      	b.n	8005a00 <_free_r+0x24>
 8005a50:	d902      	bls.n	8005a58 <_free_r+0x7c>
 8005a52:	230c      	movs	r3, #12
 8005a54:	602b      	str	r3, [r5, #0]
 8005a56:	e7d3      	b.n	8005a00 <_free_r+0x24>
 8005a58:	6820      	ldr	r0, [r4, #0]
 8005a5a:	1821      	adds	r1, r4, r0
 8005a5c:	428a      	cmp	r2, r1
 8005a5e:	bf04      	itt	eq
 8005a60:	6811      	ldreq	r1, [r2, #0]
 8005a62:	6852      	ldreq	r2, [r2, #4]
 8005a64:	6062      	str	r2, [r4, #4]
 8005a66:	bf04      	itt	eq
 8005a68:	1809      	addeq	r1, r1, r0
 8005a6a:	6021      	streq	r1, [r4, #0]
 8005a6c:	605c      	str	r4, [r3, #4]
 8005a6e:	e7c7      	b.n	8005a00 <_free_r+0x24>
 8005a70:	bd38      	pop	{r3, r4, r5, pc}
 8005a72:	bf00      	nop
 8005a74:	20012de8 	.word	0x20012de8

08005a78 <_malloc_r>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	1ccd      	adds	r5, r1, #3
 8005a7c:	f025 0503 	bic.w	r5, r5, #3
 8005a80:	3508      	adds	r5, #8
 8005a82:	2d0c      	cmp	r5, #12
 8005a84:	bf38      	it	cc
 8005a86:	250c      	movcc	r5, #12
 8005a88:	2d00      	cmp	r5, #0
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	db01      	blt.n	8005a92 <_malloc_r+0x1a>
 8005a8e:	42a9      	cmp	r1, r5
 8005a90:	d903      	bls.n	8005a9a <_malloc_r+0x22>
 8005a92:	230c      	movs	r3, #12
 8005a94:	6033      	str	r3, [r6, #0]
 8005a96:	2000      	movs	r0, #0
 8005a98:	bd70      	pop	{r4, r5, r6, pc}
 8005a9a:	f000 f87d 	bl	8005b98 <__malloc_lock>
 8005a9e:	4a21      	ldr	r2, [pc, #132]	; (8005b24 <_malloc_r+0xac>)
 8005aa0:	6814      	ldr	r4, [r2, #0]
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	b991      	cbnz	r1, 8005acc <_malloc_r+0x54>
 8005aa6:	4c20      	ldr	r4, [pc, #128]	; (8005b28 <_malloc_r+0xb0>)
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	b91b      	cbnz	r3, 8005ab4 <_malloc_r+0x3c>
 8005aac:	4630      	mov	r0, r6
 8005aae:	f000 f863 	bl	8005b78 <_sbrk_r>
 8005ab2:	6020      	str	r0, [r4, #0]
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f000 f85e 	bl	8005b78 <_sbrk_r>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	d124      	bne.n	8005b0a <_malloc_r+0x92>
 8005ac0:	230c      	movs	r3, #12
 8005ac2:	6033      	str	r3, [r6, #0]
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	f000 f868 	bl	8005b9a <__malloc_unlock>
 8005aca:	e7e4      	b.n	8005a96 <_malloc_r+0x1e>
 8005acc:	680b      	ldr	r3, [r1, #0]
 8005ace:	1b5b      	subs	r3, r3, r5
 8005ad0:	d418      	bmi.n	8005b04 <_malloc_r+0x8c>
 8005ad2:	2b0b      	cmp	r3, #11
 8005ad4:	d90f      	bls.n	8005af6 <_malloc_r+0x7e>
 8005ad6:	600b      	str	r3, [r1, #0]
 8005ad8:	50cd      	str	r5, [r1, r3]
 8005ada:	18cc      	adds	r4, r1, r3
 8005adc:	4630      	mov	r0, r6
 8005ade:	f000 f85c 	bl	8005b9a <__malloc_unlock>
 8005ae2:	f104 000b 	add.w	r0, r4, #11
 8005ae6:	1d23      	adds	r3, r4, #4
 8005ae8:	f020 0007 	bic.w	r0, r0, #7
 8005aec:	1ac3      	subs	r3, r0, r3
 8005aee:	d0d3      	beq.n	8005a98 <_malloc_r+0x20>
 8005af0:	425a      	negs	r2, r3
 8005af2:	50e2      	str	r2, [r4, r3]
 8005af4:	e7d0      	b.n	8005a98 <_malloc_r+0x20>
 8005af6:	428c      	cmp	r4, r1
 8005af8:	684b      	ldr	r3, [r1, #4]
 8005afa:	bf16      	itet	ne
 8005afc:	6063      	strne	r3, [r4, #4]
 8005afe:	6013      	streq	r3, [r2, #0]
 8005b00:	460c      	movne	r4, r1
 8005b02:	e7eb      	b.n	8005adc <_malloc_r+0x64>
 8005b04:	460c      	mov	r4, r1
 8005b06:	6849      	ldr	r1, [r1, #4]
 8005b08:	e7cc      	b.n	8005aa4 <_malloc_r+0x2c>
 8005b0a:	1cc4      	adds	r4, r0, #3
 8005b0c:	f024 0403 	bic.w	r4, r4, #3
 8005b10:	42a0      	cmp	r0, r4
 8005b12:	d005      	beq.n	8005b20 <_malloc_r+0xa8>
 8005b14:	1a21      	subs	r1, r4, r0
 8005b16:	4630      	mov	r0, r6
 8005b18:	f000 f82e 	bl	8005b78 <_sbrk_r>
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d0cf      	beq.n	8005ac0 <_malloc_r+0x48>
 8005b20:	6025      	str	r5, [r4, #0]
 8005b22:	e7db      	b.n	8005adc <_malloc_r+0x64>
 8005b24:	20012de8 	.word	0x20012de8
 8005b28:	20012dec 	.word	0x20012dec

08005b2c <_realloc_r>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	4607      	mov	r7, r0
 8005b30:	4614      	mov	r4, r2
 8005b32:	460e      	mov	r6, r1
 8005b34:	b921      	cbnz	r1, 8005b40 <_realloc_r+0x14>
 8005b36:	4611      	mov	r1, r2
 8005b38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b3c:	f7ff bf9c 	b.w	8005a78 <_malloc_r>
 8005b40:	b922      	cbnz	r2, 8005b4c <_realloc_r+0x20>
 8005b42:	f7ff ff4b 	bl	80059dc <_free_r>
 8005b46:	4625      	mov	r5, r4
 8005b48:	4628      	mov	r0, r5
 8005b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b4c:	f000 f826 	bl	8005b9c <_malloc_usable_size_r>
 8005b50:	42a0      	cmp	r0, r4
 8005b52:	d20f      	bcs.n	8005b74 <_realloc_r+0x48>
 8005b54:	4621      	mov	r1, r4
 8005b56:	4638      	mov	r0, r7
 8005b58:	f7ff ff8e 	bl	8005a78 <_malloc_r>
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d0f2      	beq.n	8005b48 <_realloc_r+0x1c>
 8005b62:	4631      	mov	r1, r6
 8005b64:	4622      	mov	r2, r4
 8005b66:	f7ff fc11 	bl	800538c <memcpy>
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	f7ff ff35 	bl	80059dc <_free_r>
 8005b72:	e7e9      	b.n	8005b48 <_realloc_r+0x1c>
 8005b74:	4635      	mov	r5, r6
 8005b76:	e7e7      	b.n	8005b48 <_realloc_r+0x1c>

08005b78 <_sbrk_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4c06      	ldr	r4, [pc, #24]	; (8005b94 <_sbrk_r+0x1c>)
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	4605      	mov	r5, r0
 8005b80:	4608      	mov	r0, r1
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	f7fb fa8e 	bl	80010a4 <_sbrk>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_sbrk_r+0x1a>
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_sbrk_r+0x1a>
 8005b90:	602b      	str	r3, [r5, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	20012e88 	.word	0x20012e88

08005b98 <__malloc_lock>:
 8005b98:	4770      	bx	lr

08005b9a <__malloc_unlock>:
 8005b9a:	4770      	bx	lr

08005b9c <_malloc_usable_size_r>:
 8005b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba0:	1f18      	subs	r0, r3, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bfbc      	itt	lt
 8005ba6:	580b      	ldrlt	r3, [r1, r0]
 8005ba8:	18c0      	addlt	r0, r0, r3
 8005baa:	4770      	bx	lr

08005bac <_init>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	bf00      	nop
 8005bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb2:	bc08      	pop	{r3}
 8005bb4:	469e      	mov	lr, r3
 8005bb6:	4770      	bx	lr

08005bb8 <_fini>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr
